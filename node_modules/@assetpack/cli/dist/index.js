var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { AssetPack } from '@assetpack/core';
import chalk from 'chalk';
import { Command } from 'commander';
import findUp from 'find-up';
import path from 'path';
import { pathToFileURL } from 'url';
const program = new Command();
program.description('Our New CLI');
program.version('0.2.0');
program.option('-c, --config <path>', 'config file to use');
// TODO: add watch option
// program.option('-w, --watch', 'watch for changes');
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        yield program.parseAsync();
        const options = program.opts();
        // if config exist then use that path, otherwise use find-up
        const configPath = options.config ? path.resolve(process.cwd(), options.config) : yield findUp('.assetpack.js', { cwd: process.cwd() });
        if (!configPath) {
            logEvent({
                message: 'No config file found',
                level: 'error',
            });
            process.exit(1);
        }
        const fileURL = pathToFileURL(configPath);
        const config = (yield import(fileURL.toString())).default;
        if (!config) {
            logEvent({
                message: 'Config file found, but could not be read',
                level: 'error',
            });
            process.exit(1);
        }
        const assetpack = new AssetPack(config);
        yield assetpack.run();
    });
}
function logEvent(event) {
    switch (event.level) {
        case 'verbose':
        case 'info':
            console.log(`${chalk.blue.bold('›')} Info: ${chalk.blue.bold(event.message)}`);
            break;
        case 'warn':
            console.log(`${chalk.yellow.bold('›')} Warn: ${chalk.yellow.bold(event.message)}`);
            break;
        case 'error':
            console.log(`${chalk.red.bold('›')} Error: ${chalk.red.bold(event.message)}`);
            process.exit(1);
            break;
        default:
            throw new Error(`Unknown log level ${event.level}`);
    }
}
console.log(); // log a new line so there is a nice space
main();
//# sourceMappingURL=index.js.map