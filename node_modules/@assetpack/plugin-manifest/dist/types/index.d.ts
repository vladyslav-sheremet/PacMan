import { ChildTree, Processor, Plugin, RootTree, Tags } from '@assetpack/core';

interface BaseManifestOptions {
    output?: string;
    defaultParser: {
        type: 'copy';
        parser: (tree: ChildTree, processor: Processor) => any[];
    };
    parsers?: {
        type: string;
        parser: (tree: ChildTree, processor: Processor) => any[];
    }[];
}
type Finish<T> = (plugin: Plugin<T>, tree: RootTree, processor: Processor, options: T) => any;
declare function baseManifest<T extends BaseManifestOptions>(func: Finish<T>, options: T): Plugin<T>;

interface PixiManifest {
    name: string;
    assets: PixiManifestEntry[];
}
interface PixiManifestEntry {
    name: string | string[];
    srcs: string | string[];
    data?: {
        tags: Tags;
        [x: string]: any;
    };
}
interface PixiManifestOptions extends BaseManifestOptions {
    defaultParser: {
        type: 'copy';
        parser: (tree: ChildTree, processor: Processor) => any[];
    };
    parsers?: {
        type: string;
        parser: (tree: ChildTree, processor: Processor) => PixiManifestEntry[];
    }[];
}
declare function pixiManifest(options?: Partial<PixiManifestOptions>): Plugin<PixiManifestOptions>;
declare function defaultPixiParser(tree: ChildTree, processor: Processor): PixiManifestEntry[];

declare function getManifestName(path: string, entry: string): string | null;

export { BaseManifestOptions, Finish, PixiManifest, PixiManifestEntry, PixiManifestOptions, baseManifest, defaultPixiParser, getManifestName, pixiManifest };
