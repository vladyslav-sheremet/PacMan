import { Plugin, PluginOptions, Processor, RootTree, TransformedTree } from '@assetpack/core';
import sharp from 'sharp';

interface CompressPngOptions extends PluginOptions<'nc'> {
    compression: Omit<sharp.PngOptions, 'force'>;
}
declare function compressPng(options?: CompressPngOptions): Plugin<CompressPngOptions>;

interface CompressJpgOptions extends PluginOptions<'nc'> {
    compression: Omit<sharp.JpegOptions, 'force'>;
}
declare function compressJpg(options?: CompressJpgOptions): Plugin<CompressJpgOptions>;

interface CompressWebpOptions extends PluginOptions<'nc'> {
    compression: Omit<sharp.WebpOptions, 'force'>;
}
declare function compressWebp(options?: CompressWebpOptions): Plugin<CompressWebpOptions>;

type SharpOptions = Omit<sharp.JpegOptions, 'force'> | Omit<sharp.PngOptions, 'force'> | Omit<sharp.WebpOptions, 'force'> | Omit<sharp.AvifOptions, 'force'>;
declare function sharpCompress(type: 'png' | 'jpeg' | 'webp' | 'avif', data: {
    input: string;
    output?: string;
    processor: Processor;
    tree: RootTree | TransformedTree;
    compression: SharpOptions;
}): Promise<void>;

export { compressJpg, compressPng, compressWebp, sharpCompress };
