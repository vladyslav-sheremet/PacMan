{"version":3,"file":"pixi-ui.js","sources":["../src/Button.ts","../src/utils/helpers/view.ts","../src/Switcher.ts","../src/CheckBox.ts","../src/utils/helpers/hitbox.ts","../src/ProgressBar.ts","../src/SliderBase.ts","../src/DoubleSlider.ts","../src/utils/helpers/text.ts","../src/utils/helpers/fit.ts","../src/FancyButton.ts","../src/Input.ts","../src/Layout.ts","../src/MaskedFrame.ts","../src/RadioGroup.ts","../src/utils/trackpad/Spring.ts","../src/utils/trackpad/ScrollSpring.ts","../src/utils/trackpad/SlidingNumber.ts","../src/utils/trackpad/Trackpad.ts","../src/ScrollBox.ts","../src/Select.ts","../src/Slider.ts"],"sourcesContent":["import { utils } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { FederatedPointerEvent } from '@pixi/events';\nimport { Signal } from 'typed-signals';\n\n/**\n * Adds button events to a given container-based view\n *\n * so you can subscribe to them and use your container-based instance as a button.\n * @example\n * ```\n * const container = new Container();\n * const button = new Button(\n *      new Graphics()\n *          .beginFill(0xFFFFFF)\n *          .drawRoundedRect(0, 0, 100, 50, 15)\n * );\n *\n * buttonEvents.onPress.connect(() => console.log('onPress'));\n *\n * container.addChild(buttonEvents.view);\n * ```\n */\nexport class Button\n{\n    /** Container, given as a constructor parameter that is a button view. */\n    public view: Container;\n\n    /** Event that is fired when the button is pressed. */\n    public onPress: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n\n    /** Event that is fired when the button is down. */\n    public onDown: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n\n    /**\n     * Event that fired when a down event happened inside the button\n     * and up event happened inside or outside of the button\n     */\n    public onUp: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n\n    /** Event that is fired when the mouse hovers the button. */\n    public onHover: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n\n    /** Event that fired when the mouse is out of the view */\n    public onOut: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n\n    /**\n     * Event that fired when mouse up event happens outside of the button\n     * after the down event happened inside the button boundaries.\n     */\n    public onUpOut: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n\n    private _isDown: boolean;\n    private _isMouseIn: boolean;\n    private _enabled: boolean;\n\n    /**\n     * Turns a given container-based view into a button by adding all button events.\n     * @param {Container} view - Contained-based view\n     */\n    constructor(view: Container)\n    {\n        this.view = view;\n\n        this.createEvents();\n\n        this.enabled = true;\n    }\n\n    /**\n     * Method called when the button pressed.\n     * To be overridden.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    public down(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /**\n     * Method called when the button is up.\n     * To be overridden.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    public up(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /**\n     * Method called when the mouse hovers the button.\n     * To be overridden.\n     * This is fired only on PC.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    public hover(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /**\n     * Method called when the mouse press down the button.\n     * To be overridden.\n     * This is fired only on PC.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    public press(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /**\n     * Method called when the mouse leaves the button.\n     * To be overridden.\n     * This is fired only on PC.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    public out(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /**\n     * Method called when the up event happens outside of the button,\n     * after the down event happened inside the button boundaries.\n     * To be overridden.\n     * This is fired only on PC.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    public upOut(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /** Getter that returns if the button is down. */\n    get isDown(): boolean\n    {\n        return this._isDown;\n    }\n\n    /**\n     * Swither, which prevents all button events from firing.\n     * @param {boolean} enabled\n     */\n    set enabled(enabled: boolean)\n    {\n        this._enabled = enabled;\n        this.view.interactive = enabled;\n        this.view.cursor = enabled ? 'pointer' : 'default';\n\n        if (!enabled)\n        {\n            this._processUp();\n        }\n    }\n\n    /** Getter that returns button state, that controls if button events are firing. */\n    get enabled(): boolean\n    {\n        return this._enabled;\n    }\n\n    private _processUp(e?: FederatedPointerEvent)\n    {\n        if (this._isDown)\n        {\n            this.onUp.emit(this, e);\n        }\n        this._isDown = false;\n    }\n\n    private _processUpOut(e?: FederatedPointerEvent)\n    {\n        if (this._isDown)\n        {\n            this.onUp.emit(this, e);\n            this.onUpOut.emit(this, e);\n        }\n\n        this._isDown = false;\n    }\n\n    private _processOut(e?: FederatedPointerEvent)\n    {\n        if (this._isMouseIn)\n        {\n            this._isMouseIn = false;\n            this.onOut.emit(this, e);\n        }\n    }\n\n    private _upOut(e?: FederatedPointerEvent)\n    {\n        this.upOut(e);\n    }\n\n    private _out(e?: FederatedPointerEvent)\n    {\n        this.out(e);\n    }\n\n    private createEvents()\n    {\n        this.onPress = new Signal();\n        this.onDown = new Signal();\n        this.onUp = new Signal();\n        this.onHover = new Signal();\n        this.onOut = new Signal();\n        this.onUpOut = new Signal();\n\n        this.view.on('pointerdown', (e: FederatedPointerEvent) =>\n        {\n            this._isDown = true;\n            this.onDown.emit(this, e);\n        });\n\n        this.view.on('pointerup', (e: FederatedPointerEvent) =>\n        {\n            this._processUp(e);\n        });\n\n        this.view.on('pointerupoutside', (e: FederatedPointerEvent) =>\n        {\n            this._processUpOut(e);\n        });\n\n        this.view.on('pointerout', (e: FederatedPointerEvent) =>\n        {\n            this._processOut(e);\n        });\n\n        this.view.on('pointertap', (e: FederatedPointerEvent) =>\n        {\n            this._isDown = false;\n            this.onPress.emit(this, e);\n            this.press(e);\n        });\n\n        this.view.on('pointerover', (e: FederatedPointerEvent) =>\n        {\n            this._isMouseIn = true;\n            this.onHover.emit(this, e);\n        });\n\n        this.onDown.connect((_btn, e) =>\n        {\n            this.down(e);\n        });\n\n        this.onUp.connect((_btn, e) =>\n        {\n            this.up(e);\n        });\n\n        this.onUpOut.connect((_bth, e) =>\n        {\n            this._upOut(e);\n        });\n\n        if (!utils.isMobile.any)\n        {\n            this.onHover.connect((_bth, e) =>\n            {\n                this.hover(e);\n            });\n        }\n\n        this.onOut.connect((_bth, e) =>\n        {\n            this._out(e);\n        });\n    }\n}\n","import { Container } from '@pixi/display';\nimport { Sprite } from '@pixi/sprite';\n\nexport function getView(view: string | Container): Container\n{\n    if (typeof view === 'string')\n    {\n        return Sprite.from(view);\n    }\n\n    return view;\n}\n","import { Container } from '@pixi/display';\nimport { Signal } from 'typed-signals';\nimport { getView } from './utils/helpers/view';\nimport { Button } from './Button';\nimport { ButtonEvent } from './utils/HelpTypes';\n\n/**\n * Container based component that switches visibility of a given containers by any of the button events.\n *\n * By default it switches on press.\n *\n * Can be used for creating tabs, radio buttons, checkboxes etc.\n * @example\n * ```\n * // switch on click\n * const switch = new Swich([`switch_off.png`, `switch_on.png`]);\n *\n * // switch on hover\n * const button = new Swich([`button_default.png`, `button_hover.png`], ['onHover', 'onOut']);\n *\n * button.events.onPress.connect(() => console.log('button pressed'));\n *\n * ```\n */\nexport class Switcher extends Container\n{\n    private triggerEvents: Set<ButtonEvent>;\n\n    /** Container that holds all the content of the component. */\n    public innerView: Container;\n\n    /** The id of the visible(active) view. */\n    public active = 0;\n\n    /** Fired when active view changes. */\n    public onChange: Signal<(state: number | boolean) => void>;\n\n    /** Button events used to switch views. */\n    public events: Button;\n\n    /**\n     * @param {Array<Container | string>} views - Array of views or textures that will be switching.\n     * @param triggerEvents - Button events, to switch views (can be one event or an array of events).\n     * @param activeViewID - The id of the view, visible by default.\n     */\n    constructor(views: Array<Container | string>, triggerEvents?: ButtonEvent | ButtonEvent[], activeViewID = 0)\n    {\n        super();\n\n        this.innerView = new Container();\n        this.addChild(this.innerView);\n\n        this.active = activeViewID;\n\n        views.map((stateView, id) =>\n        {\n            const view = getView(stateView);\n\n            this.innerView.addChild(view);\n\n            view.visible = id === activeViewID;\n\n            return view;\n        });\n\n        this.onChange = new Signal();\n\n        if (triggerEvents)\n        {\n            if (Array.isArray(triggerEvents))\n            {\n                this.triggerEvents = new Set(triggerEvents);\n            }\n            else\n            {\n                this.triggerEvents = new Set([triggerEvents]);\n            }\n        }\n        else\n        {\n            this.triggerEvents = new Set(['onPress']);\n        }\n\n        this.events = new Button(this);\n\n        this.events.onPress.connect(() => this.switch(this.nextActive, 'onPress'));\n        this.events.onDown.connect(() => this.switch(this.nextActive, 'onDown'));\n        this.events.onUp.connect(() => this.switch(this.nextActive, 'onUp'));\n        this.events.onHover.connect(() => this.switch(this.nextActive, 'onHover'));\n        this.events.onOut.connect(() => this.switch(this.nextActive, 'onOut'));\n        this.events.onUpOut.connect(() => this.switch(this.nextActive, 'onUpOut'));\n    }\n\n    /** Returns the active view */\n    public get activeView(): Container\n    {\n        return this.views[this.active] as Container;\n    }\n\n    /** Returns all the switchable views */\n    get views(): Array<Container>\n    {\n        return this.innerView.children as Array<Container>;\n    }\n\n    /**\n     * Show a view by id, or to next one by order, if no ID provided.\n     * @param {number} id - optional id of the view to show.\n     * @param {ButtonEvent} event - optional event to use to switch views.\n     */\n    public switch(id?: number, event?: ButtonEvent): void\n    {\n        if (!this.triggerEvents.has(event))\n        {\n            return;\n        }\n\n        this.activeView.visible = false;\n        this.active = id !== undefined ? id : this.nextActive;\n\n        const newState = this.views[this.active];\n\n        newState.visible = true;\n\n        const res = this.views.length > 2 ? this.active : this.active === 1;\n\n        this.onChange.emit(res);\n    }\n\n    /**\n     * Switches a view to a given one without triggering the onChange event.\n     * @param {number} id\n     */\n    public forceSwitch(id: number): void\n    {\n        this.activeView.visible = false;\n        this.active = id !== undefined ? id : this.nextActive;\n\n        const newState = this.views[this.active];\n\n        newState.visible = true;\n    }\n\n    /** Returns the id of the next view in order. */\n    private get nextActive(): number\n    {\n        return this.active < this.views.length - 1 ? this.active + 1 : 0;\n    }\n}\n","import { Container } from '@pixi/display';\nimport { TextStyle, ITextStyle, Text } from '@pixi/text';\nimport { Signal } from 'typed-signals';\nimport { Switcher } from './Switcher';\nimport { getView } from './utils/helpers/view';\n\ntype CheckBoxStyle = {\n    checked: Container | string;\n    unchecked: Container | string;\n    text?: TextStyle | Partial<ITextStyle>;\n};\n\nexport type CheckBoxOptions = {\n    style: CheckBoxStyle;\n    text?: string;\n    checked?: boolean;\n};\n\n/**\n * Creates a container-based checkbox element.\n * @example\n * ```\n *  new CheckBox({\n *     style: {\n *         unchecked: `switch_off.png`,\n *         checked: `switch_on.png`,\n *     }\n * });\n *\n * ```\n */\nexport class CheckBox extends Switcher\n{\n    //* Text label */\n    public label!: Text;\n\n    /** Signal emitted when checkbox state changes. */\n    public onCheck: Signal<(state: boolean) => void>;\n\n    constructor(options: CheckBoxOptions)\n    {\n        const unchecked = getView(options.style.unchecked);\n        const checked = getView(options.style.checked);\n\n        super([unchecked, checked], ['onPress'], options.checked ? 1 : 0);\n\n        this.label = new Text(options.text ?? '', options.style.text);\n        this.label.visible = options.text.length > 0;\n        this.label.x = unchecked.width + 10;\n        this.label.y = (unchecked.height - this.label.height) / 2;\n\n        this.addChild(this.label);\n\n        this.onCheck = new Signal();\n\n        this.onChange.connect(() => this.onCheck.emit(this.checked));\n    }\n\n    /** Getter, which returns a checkbox state. */\n    public get checked(): boolean\n    {\n        return this.active === 1;\n    }\n\n    /** Setter, which sets a checkbox state. */\n    public set checked(checked: boolean)\n    {\n        this.switch(checked ? 1 : 0, 'onPress');\n    }\n\n    /**\n     * Setter, that sets a checkbox state without emitting a signal.\n     * @param checked\n     */\n    public forceCheck(checked: boolean)\n    {\n        this.forceSwitch(checked ? 1 : 0);\n    }\n}\n","import { Rectangle } from '@pixi/core';\nimport { DisplayObject } from '@pixi/display';\n\nexport function removeHitBox(...obj: DisplayObject[])\n{\n    obj.forEach((o) => o && (o.hitArea = new Rectangle()));\n}\n","import { Container } from '@pixi/display';\nimport { Graphics } from '@pixi/graphics';\nimport { getView } from './utils/helpers/view';\n\nexport type ProgressBarOptions = {\n    bg: Container | string;\n    fill: Container | string;\n    progress?: number;\n    fillOffset?: {\n        x?: number;\n        y?: number;\n    };\n};\n\n/**\n * Creates a ProgressBar.\n * @example\n * ```\n * new ProgressBar({\n *     bg: 'slider_bg.png',\n *     fill: 'slider.png',\n *     progress: 50,\n * });\n * ```\n */\nexport class ProgressBar extends Container\n{\n    protected readonly bg: Container;\n    protected readonly fill?: Container;\n    protected readonly fillMask?: Graphics;\n\n    /** Container, that holds all inner views. */\n    public innerView: Container;\n\n    /** Start point of progress. */\n    public progressStart = 0;\n\n    /** Current progress value. */\n    public _progress = 0;\n\n    constructor({ bg, fill, fillOffset, progress }: ProgressBarOptions)\n    {\n        super();\n\n        this.innerView = new Container();\n        this.addChild(this.innerView);\n\n        this.bg = new Container();\n        this.bg.addChild(getView(bg));\n\n        this.innerView.addChild(this.bg);\n\n        if (fill)\n        {\n            this.fill = new Container();\n            this.fill.addChild(getView(fill));\n\n            const offsetX = fillOffset?.x ?? 0;\n            const offsetY = fillOffset?.y ?? 0;\n\n            this.fill.x = ((this.bg.width - this.fill.width) / 2) + offsetX;\n            this.fill.y = ((this.bg.height - this.fill.height) / 2) + offsetY;\n\n            this.fillMask = new Graphics();\n            this.fill.addChild(this.fillMask);\n            this.fill.mask = this.fillMask;\n\n            this.addChild(this.fill);\n        }\n\n        this.progress = progress;\n    }\n\n    protected validate(progress: number): number\n    {\n        progress = Math.round(progress);\n\n        if (progress < 0)\n        {\n            return 0;\n        }\n\n        if (progress > 100)\n        {\n            return 100;\n        }\n\n        return progress;\n    }\n\n    /** Sets current progress value. */\n    set progress(progress: number)\n    {\n        this._progress = this.validate(progress);\n\n        const startPoint = (this.bg.width / 100) * this.progressStart;\n        const endPoint = ((this.bg.width / 100) * this._progress) - startPoint;\n\n        if (this.fillMask)\n        {\n            this.fillMask.clear().lineStyle(0).beginFill(0xffffff).drawRect(startPoint, 0, endPoint, this.fill.height);\n        }\n    }\n\n    /** Returns current progress value. */\n    get progress(): number\n    {\n        return this._progress;\n    }\n}\n","import { Container } from '@pixi/display';\nimport { Sprite } from '@pixi/sprite';\nimport { ITextStyle, Text, TextStyle } from '@pixi/text';\nimport { removeHitBox } from './utils/helpers/hitbox';\n\nimport { getView } from './utils/helpers/view';\nimport { ProgressBar } from './ProgressBar';\nimport { FederatedPointerEvent } from '@pixi/events';\n\nexport type BaseSliderOptions = {\n    bg: Container | string;\n    slider1: Container | string;\n    slider2?: Container | string;\n    fill?: Container | string;\n    min?: number;\n    max?: number;\n    value1?: number;\n    value2?: number;\n    valueTextStyle?: TextStyle | Partial<ITextStyle>;\n    showValue?: boolean;\n    valueTextOffset?: {\n        x?: number;\n        y?: number;\n    };\n    fillOffset?: {\n        x?: number;\n        y?: number;\n    };\n};\n\n/** Hepper class, used as a base for single or double slider creation. */\nexport class SliderBase extends ProgressBar\n{\n    protected slider1: Container;\n    protected slider2: Container;\n\n    protected value1Text?: Text;\n    protected value2Text?: Text;\n\n    protected _value1: number;\n    protected _value2: number;\n\n    protected dragging = 0;\n\n    /** Minimal value. */\n    public min = 0;\n\n    /** Maximal value. */\n    public max = 100;\n\n    constructor(options: BaseSliderOptions)\n    {\n        super({\n            bg: options.bg,\n            fill: options.fill ?? options.bg,\n            fillOffset: options.fillOffset\n        });\n\n        if (options.slider1)\n        {\n            this.slider1 = this.createSlider(options.slider1);\n\n            if (options.showValue)\n            {\n                this.value1Text = new Text('', options.valueTextStyle || { fill: 0xffffff });\n                this.value1Text.anchor.set(0.5);\n                this.addChild(this.value1Text);\n            }\n        }\n\n        if (options.slider2)\n        {\n            this.slider2 = this.createSlider(options.slider2);\n\n            if (options.showValue)\n            {\n                this.value2Text = new Text('', options.valueTextStyle || { fill: 0xffffff });\n                this.value2Text.anchor.set(0.5);\n                this.addChild(this.value2Text);\n            }\n        }\n\n        this.min = options.min ?? 0;\n        this.max = options.max ?? 100;\n\n        this.activate();\n    }\n\n    protected activate()\n    {\n        this.bg.interactive = true;\n        this.bg\n            .on('pointerdown', this.startUpdate, this)\n            .on('globalpointermove', this.update, this)\n            .on('pointerup', this.endUpdate, this)\n            .on('pointerupoutside', this.endUpdate, this);\n\n        if (this.slider1)\n        {\n            this.slider1.interactive = true;\n\n            this.slider1\n                .on('pointerdown', this.startUpdate, this)\n                .on('globalpointermove', this.update, this)\n                .on('pointerup', this.endUpdate, this)\n                .on('pointerupoutside', this.endUpdate, this);\n        }\n\n        if (this.slider2)\n        {\n            this.slider2.interactive = true;\n\n            this.slider2\n                .on('pointerdown', this.startUpdate, this)\n                .on('globalpointermove', this.update, this)\n                .on('pointerup', this.endUpdate, this)\n                .on('pointerupoutside', this.endUpdate, this);\n        }\n\n        removeHitBox(this.fill, this.value1Text, this.value2Text);\n    }\n\n    protected createSlider(sliderData: Container | string): Container\n    {\n        const slider = getView(sliderData);\n\n        slider.x = slider.width / 2;\n\n        const container = new Container();\n\n        container.addChild(slider);\n\n        if (slider instanceof Sprite)\n        {\n            slider.anchor.set(0.5);\n        }\n\n        container.y = this.bg.height / 2;\n\n        this.addChild(container);\n\n        return container;\n    }\n\n    protected startUpdate(event: FederatedPointerEvent)\n    {\n        this.dragging = 1;\n        this.update(event);\n    }\n\n    protected endUpdate()\n    {\n        if (!this.dragging) return;\n        this.dragging = 0;\n    }\n\n    protected update(_event: FederatedPointerEvent)\n    {\n    // override me\n    }\n}\n","import { FederatedPointerEvent } from '@pixi/events';\nimport type { DragObject } from './utils/HelpTypes';\nimport { BaseSliderOptions, SliderBase } from './SliderBase';\nimport { Signal } from 'typed-signals';\n\n/**\n * Creates a slider with range selection option.\n * @example\n * ```\n * const doubleSlider = new DoubleSlider({\n *      bg: 'slider_bg.png',\n *      fill: 'slider_progress.png',\n *      slider1: 'slider.png',\n *      slider2: 'slider.png',\n *  });\n *\n * doubleSlider.onChange.connect((value1, value2) =>\n *     console.log(`New slider range ${value1} - ${value2}`)\n * );\n * ```\n */\n\nexport class DoubleSlider extends SliderBase\n{\n    protected options: BaseSliderOptions;\n\n    private activeValue: 'value1' | 'value2';\n\n    /** Signal that fires when value have changed. */\n    public onChange: Signal<(value1: number, value2: number) => void> = new Signal();\n\n    /** Signal that fires when value is changing. */\n    public onUpdate: Signal<(value1: number, value2: number) => void> = new Signal();\n\n    constructor(options: BaseSliderOptions)\n    {\n        super(options);\n\n        this.options = options;\n\n        this.value2 = options.value2 ?? this.max;\n        this.value1 = options.value1 ?? this.min;\n    }\n\n    /** Returns left value. */\n    get value1(): number\n    {\n        return this._value1;\n    }\n\n    /** Sets left value. */\n    set value1(value1: number)\n    {\n        if (value1 === this._value1) return;\n\n        if (value1 < this.min) value1 = this.min;\n        if (value1 > this._value2) value1 = this._value2;\n\n        this._value1 = value1;\n\n        this.updateProgress();\n\n        const progress = ((this.max - this.min) / 100) * value1;\n\n        this.slider1.x = ((this.bg.width - this.slider1.width) / 100) * progress;\n\n        if (this.options.showValue)\n        {\n            this.value1Text.text = `${value1}`;\n\n            const sliderPosX = this.slider1.x + (this.slider1.width / 2);\n            const sliderPosY = this.slider1.y;\n\n            this.value1Text.x = sliderPosX + (this.options.valueTextOffset?.x ?? 0);\n            this.value1Text.y = sliderPosY + (this.options.valueTextOffset?.y ?? 0);\n        }\n\n        this.onUpdate?.emit(this.value1, this.value2);\n    }\n\n    /** Returns right value. */\n    get value2(): number\n    {\n        return this._value2;\n    }\n\n    /** Sets right value. */\n    set value2(value2: number)\n    {\n        if (value2 === this._value2) return;\n\n        if (value2 < this._value1) value2 = this._value1;\n        if (value2 > this.max) value2 = this.max;\n\n        this._value2 = value2;\n\n        this.updateProgress();\n\n        const progress = ((this.max - this.min) / 100) * value2;\n\n        this.slider2.x = ((this.bg.width - this.slider2.width) / 100) * progress;\n\n        if (this.options.showValue)\n        {\n            this.value2Text.text = `${value2}`;\n\n            const sliderPosX = this.slider2.x + (this.slider2.width / 2);\n            const sliderPosY = this.slider2.y;\n\n            this.value2Text.x = sliderPosX + (this.options.valueTextOffset?.x ?? 0);\n            this.value2Text.y = sliderPosY + (this.options.valueTextOffset?.y ?? 0);\n        }\n\n        this.onUpdate?.emit(this.value1, this.value2);\n    }\n\n    protected override update(event: FederatedPointerEvent)\n    {\n        if (!this.dragging) return;\n\n        const obj = event.currentTarget as DragObject;\n        const { x } = obj.parent.worldTransform.applyInverse(event.global);\n\n        const slider1Dist = Math.abs(x - this.slider1.x - this.slider1.width);\n        const slider2Dist = Math.abs(x - this.slider2.x);\n\n        if (!this.activeValue)\n        {\n            this.activeValue = slider1Dist < slider2Dist ? 'value1' : 'value2';\n        }\n\n        const progress = this.validate((x / this.bg.width) * 100);\n\n        if (this.activeValue === 'value1')\n        {\n            this.value1 = ((this.max - this.min) / 100) * progress;\n        }\n        else\n        {\n            this.value2 = ((this.max - this.min) / 100) * progress;\n        }\n    }\n\n    protected override endUpdate()\n    {\n        super.endUpdate();\n\n        this.activeValue = null;\n    }\n\n    private updateProgress()\n    {\n        this.progressStart = ((this.max - this.min) / 100) * this._value1;\n        this.progress = ((this.max - this.min) / 100) * this._value2;\n    }\n}\n","import { Text } from '@pixi/text';\n\nexport function getTextView(text: string | number | Text): Text\n{\n    if (text instanceof Text)\n    {\n        return text;\n    }\n\n    return new Text(text);\n}\n","import { Container } from '@pixi/display';\n\nexport function fitToView(parent: Container, child: Container, padding = 0)\n{\n    let scaleX = child.scale.x;\n    let scaleY = child.scale.y;\n\n    const maxWidth = parent.width - (padding * 2);\n    const maxHeight = parent.height - (padding * 2);\n\n    const widthOverflow = maxWidth - Math.round(child.width);\n    const heightOverflow = maxHeight - Math.round(child.height);\n\n    if (widthOverflow < 0)\n    {\n        scaleX = maxWidth / (child.width * scaleX);\n    }\n\n    if (heightOverflow < 0)\n    {\n        scaleY = maxHeight / (child.height * scaleY);\n    }\n\n    if (scaleX <= 0 || scaleY <= 0)\n    {\n        child.visible = false;\n    }\n\n    child.scale.set(Math.min(scaleX, scaleY));\n}\n","import { ObservablePoint, Ticker } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { Text } from '@pixi/text';\nimport { Sprite } from '@pixi/sprite';\nimport { getView } from './utils/helpers/view';\nimport { getTextView } from './utils/helpers/text';\nimport { Button } from './Button';\nimport { Signal } from 'typed-signals';\nimport { FederatedPointerEvent } from '@pixi/events';\nimport { fitToView } from './utils/helpers/fit';\nimport { Tween, Group } from 'tweedle.js';\n\nconst states = ['default', 'hover', 'pressed', 'disabled'] as const;\n\ntype State = typeof states[number];\ntype Pos = { x?: number; y?: number };\ntype PosList = { [K in State]?: Pos };\n\nexport type Offset = Pos & PosList;\n\ntype Views = {\n    defaultView: string | Container;\n    hoverView?: string | Container;\n    pressedView?: string | Container;\n    disabledView?: string | Container;\n    text?: string | number | Text;\n    icon?: string | Container;\n};\ntype AnimationData = {\n    x?: number;\n    y?: number;\n    width?: number;\n    height?: number;\n    scale?: Pos;\n};\ntype Animation = {\n    props: AnimationData;\n    duration?: number;\n};\ntype StateAnimations = {\n    [K in State]?: Animation;\n};\n\nexport type ButtonOptions = Views & {\n    padding?: number;\n    anchor?: number;\n    anchorX?: number;\n    anchorY?: number;\n    offset?: Offset;\n    textOffset?: Offset;\n    iconOffset?: Offset;\n    animations?: StateAnimations;\n};\n\n/**\n * Button component with a lots of tweaks, to create a button fast.\n *\n *  By default text view and icon view are centered in the active view.\n *\n * If views are not the same size, offset property of the constructor\n * can be used to adjust the position of the text, icon and the views.\n * @example\n * ```\n * const button = new Button({\n *     defaultView: `button.png`,\n *     hoverView: `button_hover.png`,\n *     pressedView: `button_pressed.png`,\n *     text: new Text('Click me!'),\n * });\n *\n * button.onPress.connect(() => console.log('Button pressed!'));\n * ```\n */\nexport class FancyButton extends Container\n{\n    private events: Button;\n    private animations: StateAnimations;\n    private originalInnerViewState: AnimationData;\n\n    /** Padding of the button text view. If button text does not fit active view + padding it will scale down to fit. */\n    public padding: number;\n\n    /** Offset of the button state views. If state views have different sizes, this option can help adjust them. */\n    public offset: Offset & Pos;\n\n    /** Offset of the text view. Can be set to any state of the button. */\n    public textOffset: Offset;\n\n    /** Offset of the icon view. Can be set to any state of the button. */\n    public iconOffset: Offset;\n\n    //* View that holds all button inner views */\n    public innerView: Container;\n\n    /** View that is shown when non of the button events are active. */\n    public defaultView: Container;\n\n    /** View that is shown when the mouse hovers over the button. */\n    public hoverView!: Container;\n\n    /** View, shown when the mouse press on the component. */\n    public pressedView!: Container;\n\n    /** View shown when the button is disabled. */\n    public disabledView!: Container;\n\n    /** View for the button text. */\n    public textView!: Text;\n\n    /** View for the button icon. */\n    public iconView!: Container;\n\n    /** State of the button. Possible valuers are: 'default', 'hover', 'pressed', 'disabled' */\n    public state: State;\n\n    /** Anchor point of the button. */\n    public anchor: ObservablePoint;\n\n    /** Event fired when the button was pressed. */\n    public onPress: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n\n    /** Event fired when the button is down. */\n    public onDown: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n\n    /** Event fired when the down event happens inside the button and up event happened inside or outside of the button */\n    public onUp: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n\n    /** Event fired when a mouse hovers the button. */\n    public onHover: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n\n    /** Event fired when a mouse leaves the button. */\n    public onOut: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n\n    /** Event fired when the up event happens outside of the button, after the down event happened inside the button. */\n    public onUpOut: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n\n    constructor({\n        defaultView,\n        hoverView,\n        pressedView,\n        disabledView,\n        text,\n        padding,\n        offset,\n        textOffset,\n        iconOffset,\n        anchor,\n        anchorX,\n        anchorY,\n        icon,\n        animations\n    }: ButtonOptions)\n    {\n        super();\n\n        this.createViews({\n            defaultView,\n            hoverView,\n            pressedView,\n            disabledView,\n            text,\n            icon\n        });\n\n        this.anchor = new ObservablePoint(this.resetViewsPositions, this);\n        this.anchor.set(anchorX ?? anchor ?? 0, anchorY ?? anchor ?? 0);\n\n        this.padding = padding ?? 0;\n        this.offset = offset;\n        this.textOffset = textOffset;\n        this.iconOffset = iconOffset;\n        if (animations)\n        {\n            this.animations = animations;\n            Ticker.shared.add(() => Group.shared.update());\n        }\n\n        this.setState('default');\n\n        this.addEvents();\n    }\n\n    /**\n     * Updates the text of the button and updates its scaling basing on the new size.\n     * @param {string | number} text\n     */\n    set text(text: string | number)\n    {\n        if (!this.textView)\n        {\n            this.createTextView(typeof text === 'number' ? text.toString() : text);\n        }\n\n        this.textView.text = text;\n        this.setState(this.state);\n        this.adjustTextView(this.state);\n    }\n\n    /** Returns the text string of the button text element. */\n    get text(): string\n    {\n        return this.textView?.text;\n    }\n\n    /**\n     * Setter, that prevents all button events from firing.\n     * @param {boolean} enabled\n     */\n    set enabled(enabled: boolean)\n    {\n        this.events.enabled = enabled;\n\n        this.setState(enabled ? 'default' : 'disabled');\n    }\n\n    /** Getter that returns button state, that controls if button events are firing. */\n    get enabled(): boolean\n    {\n        return this.events.enabled;\n    }\n\n    /**\n     * Updates button state and shows the according views.\n     *\n     * Updates positions and offsets of the views.\n     *\n     * Plays animations if they are set.\n     * @param {State} newState\n     */\n    setState(newState: State)\n    {\n        if (this.state === newState)\n        {\n            return;\n        }\n\n        const currentView = this.getStateView(this.state);\n        const activeView = this.getStateView(newState);\n\n        currentView.visible = false;\n        activeView.visible = true;\n\n        this.state = newState;\n\n        this.setOffset(activeView, newState, this.offset);\n        this.adjustTextView(newState);\n        this.adjustIconView(newState);\n\n        this.playAnimations(newState);\n    }\n\n    /**\n     *\n     * Manage button text view.\n     * @param {string | Text} text - can be a string or a Text (Container-based element).\n     */\n    private createTextView(text: string | number | Text)\n    {\n        this.textView = getTextView(text);\n        this.textView.anchor.set(0);\n    }\n\n    /**\n     * Manage button icon view.\n     * @param {string | Text} icon - can be a string or a Text (Container-based element).\n     */\n    private createIconView(icon: string | Container)\n    {\n        this.iconView = getView(icon);\n    }\n\n    /**\n     * Manages views offsets if it's set.\n     * @param view\n     * @param state\n     * @param offset\n     */\n    private setOffset(view: Container, state: State, offset: Offset)\n    {\n        const stateOffset = offset\n            ? offset[state]\n            : {\n                x: 0,\n                y: 0\n            };\n        const defaultStateOffset = offset?.default;\n\n        if (stateOffset)\n        {\n            view.x += stateOffset.x ?? 0;\n            view.y += stateOffset.y ?? 0;\n        }\n        else if (defaultStateOffset)\n        {\n            view.x += defaultStateOffset.x ?? 0;\n            view.y += defaultStateOffset.y ?? 0;\n        }\n        else if (offset.x || offset.y)\n        {\n            view.x += offset.x ?? 0;\n            view.y += offset.y ?? 0;\n        }\n    }\n\n    /**\n     * Returns active view for the state.\n     * @param state\n     */\n    private getStateView(state: State): Container\n    {\n        switch (state)\n        {\n            case 'hover':\n                return this.hoverView ?? this.defaultView;\n            case 'pressed':\n                return this.pressedView ?? this.defaultView;\n            case 'disabled':\n                return this.disabledView ?? this.defaultView;\n            case 'default':\n            default:\n                return this.defaultView;\n        }\n    }\n\n    /**\n     * Adjusts text view position and scale.\n     * @param {State} state\n     */\n    private adjustTextView(state: State)\n    {\n        if (!this.textView)\n        {\n            return;\n        }\n\n        const activeView = this.getStateView(this.state);\n\n        fitToView(activeView, this.textView, this.padding);\n\n        activeView.addChild(this.textView);\n\n        this.textView.x = (activeView.width - this.textView.width) / 2;\n        this.textView.y = (activeView.height - this.textView.height) / 2;\n\n        this.setOffset(this.textView, state, this.textOffset);\n    }\n\n    /**\n     * Adjusts icon view position and scale.\n     * @param {State} state\n     */\n    private adjustIconView(state: State)\n    {\n        if (!this.iconView)\n        {\n            return;\n        }\n\n        const activeView = this.getStateView(this.state);\n\n        fitToView(activeView, this.iconView, this.padding);\n\n        activeView.addChild(this.iconView);\n\n        this.iconView.x = (activeView.width / 2) - (this.iconView.width / 2);\n        this.iconView.y = (activeView.height / 2) - (this.iconView.height / 2);\n\n        this.setOffset(this.iconView, state, this.iconOffset);\n    }\n\n    /**\n     * Reset views positions according to the button anchor setting.\n     * We have to set the anchor position for each view individually, as each of them\n     * can be a different type of view (container without anchor, sprite with anchor, etc)\n     * we have to reset all anchors to 0,0 and then set the positions manually.\n     */\n    private resetViewsPositions()\n    {\n        const anchorX = this.anchor?.x ?? 0;\n        const anchorY = this.anchor?.y ?? 0;\n        const views = [this.defaultView, this.hoverView, this.pressedView, this.disabledView];\n\n        views.forEach((view) =>\n        {\n            if (!view) return;\n\n            (view as Sprite).anchor?.set(0);\n\n            view.x = -view.width * anchorX;\n            view.y = -view.height * anchorY;\n        });\n    }\n\n    /**\n     * Button views manager. Adds or creates all button views according to the config.\n     * @param {Views} views\n     */\n    private createViews(views: Views)\n    {\n        const { defaultView, hoverView, pressedView, disabledView, text, icon } = views;\n\n        this.innerView = new Container();\n        this.addChild(this.innerView);\n\n        this.defaultView = getView(defaultView);\n        this.innerView.addChild(this.defaultView);\n\n        if (hoverView)\n        {\n            this.hoverView = getView(hoverView);\n            this.innerView.addChild(this.hoverView);\n            this.hoverView.visible = false;\n        }\n\n        if (pressedView)\n        {\n            this.pressedView = getView(pressedView);\n            this.innerView.addChild(this.pressedView);\n            this.pressedView.visible = false;\n        }\n\n        if (disabledView)\n        {\n            this.disabledView = getView(disabledView);\n            this.innerView.addChild(this.disabledView);\n            this.disabledView.visible = false;\n        }\n\n        if (text)\n        {\n            this.createTextView(text);\n        }\n\n        if (icon)\n        {\n            this.createIconView(icon);\n        }\n    }\n\n    /** Creates all button events */\n    private addEvents()\n    {\n        this.events = new Button(this);\n\n        this.onPress = new Signal();\n        this.onDown = new Signal();\n        this.onUp = new Signal();\n        this.onHover = new Signal();\n        this.onOut = new Signal();\n        this.onUpOut = new Signal();\n\n        this.events.onPress.connect((_bth, e?: FederatedPointerEvent) =>\n        {\n            this.onPress.emit(this, e);\n            this.setState('hover');\n        });\n\n        this.events.onDown.connect((_bth, e?: FederatedPointerEvent) =>\n        {\n            this.onDown.emit(this, e);\n            this.setState('pressed');\n        });\n\n        this.events.onUp.connect((_bth, e?: FederatedPointerEvent) =>\n        {\n            this.onUp.emit(this, e);\n            this.setState('hover');\n        });\n\n        this.events.onHover.connect((_bth, e?: FederatedPointerEvent) =>\n        {\n            this.onHover.emit(this, e);\n            this.setState('hover');\n        });\n\n        this.events.onOut.connect((_bth, e?: FederatedPointerEvent) =>\n        {\n            this.onOut.emit(this, e);\n            this.setState('default');\n        });\n\n        this.events.onUpOut.connect((_bth, e?: FederatedPointerEvent) =>\n        {\n            this.onUpOut.emit(this, e);\n            this.setState('default');\n        });\n    }\n\n    /**\n     * Starts animation for the current button state if configured.\n     * @param {State} state\n     */\n    private playAnimations(state: State)\n    {\n        if (!this.originalInnerViewState)\n        {\n            this.originalInnerViewState = {\n                x: this.innerView.x,\n                y: this.innerView.y,\n                width: this.innerView.width,\n                height: this.innerView.height,\n                scale: {\n                    x: this.innerView.scale.x,\n                    y: this.innerView.scale.y\n                }\n            };\n        }\n\n        if (this.animations && this.animations[state])\n        {\n            const data = this.animations[state];\n\n            new Tween(this.innerView).to(data.props, data.duration).start();\n        }\n        else if (this.animations && state === 'default')\n        {\n            new Tween(this.innerView).to(this.originalInnerViewState, 100).start();\n        }\n    }\n}\n","import { Texture, utils, Ticker } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { Graphics } from '@pixi/graphics';\nimport { Sprite } from '@pixi/sprite';\nimport { TextStyle, Text } from '@pixi/text';\nimport { Signal } from 'typed-signals';\nimport { getView } from './utils/helpers/view';\n\nexport type InputOptions = {\n    bg?: Container | string;\n    textStyle?: Partial<TextStyle>;\n    placeholder?: string;\n    value?: string;\n    maxLength?: number;\n    align?: 'left' | 'center' | 'right';\n    padding?: number;\n};\n\n/**\n * Container-based component that creates an input to read the user's text.\n * @example\n * ```\n * new Input({\n *     bg: Sprite.from('input.png'),\n *     placeholder: 'Enter text'\n * });\n * ```\n */\nexport class Input extends Container\n{\n    private readonly bg: Container;\n    private readonly inputField: Text;\n    private readonly inputMask: Graphics;\n    private readonly placeholder: Text;\n    private _cursor: Sprite;\n    private editing = false;\n    private tick = 0;\n\n    private activation = false;\n    private readonly options: InputOptions;\n\n    /** Fires when input loses focus. */\n    public readonly onEnter: Signal<(text: string) => void>;\n\n    /** Fires every time input string is changed. */\n    public readonly onChange: Signal<(text: string) => void>;\n\n    constructor(options: InputOptions)\n    {\n        super();\n\n        this.options = options;\n        this.bg = getView(options.bg);\n        this.bg.cursor = 'text';\n        this.bg.interactive = true;\n\n        const defaultTextStyle = {\n            fill: 0x000000,\n            align: 'center'\n        } as TextStyle;\n\n        const textStyle = new TextStyle(options.textStyle ?? defaultTextStyle);\n\n        this.inputField = new Text('', textStyle);\n\n        this.inputMask = new Graphics()\n            .beginFill(0xffffff)\n            .drawRect(this.padding, this.padding, this.bg.width - (this.padding * 2), this.bg.height - (this.padding * 2));\n\n        this.inputField.mask = this.inputMask;\n\n        this._cursor = new Sprite(Texture.WHITE);\n        this._cursor.tint = Number(options.textStyle.fill) || 0x000000;\n        this._cursor.anchor.set(0.5);\n        this._cursor.width = 2;\n        this._cursor.height = this.inputField.height * 0.8;\n        this._cursor.alpha = 0;\n        this._cursor.mask = this.inputMask;\n\n        this.placeholder = new Text(options.placeholder, textStyle ?? defaultTextStyle);\n        this.placeholder.visible = !!options.placeholder;\n\n        this.value = options.value ?? '';\n\n        this.addChild(this.bg, this.inputField, this.placeholder, this._cursor, this.inputMask);\n\n        this.align();\n\n        this.cursor = 'text';\n        this.interactive = true;\n\n        this.on('pointertap', () => (this.activation = true));\n\n        if (utils.isMobile.any)\n        {\n            window.addEventListener('touchstart', () => this.handleActivation());\n\n            let keyboard = document.getElementById('v-keyboard') as HTMLInputElement;\n\n            if (!keyboard)\n            {\n                keyboard = document.createElement('input');\n\n                document.body.appendChild(keyboard);\n                keyboard.setAttribute('id', 'v-keyboard');\n\n                keyboard.style.opacity = '0';\n            }\n\n            keyboard.oninput = () =>\n            {\n                let value = keyboard.value;\n\n                const maxLength = this.options.maxLength;\n\n                if (maxLength && value.length > this.options.maxLength)\n                {\n                    value = value.substring(0, maxLength);\n                    keyboard.value = value;\n                }\n\n                this.value = value;\n\n                this.onChange.emit(this.value);\n            };\n        }\n        else\n        {\n            window.addEventListener('click', () =>\n            {\n                this.handleActivation();\n                this.onEnter.emit(this.value);\n            });\n\n            window.addEventListener('keydown', (e) =>\n            {\n                const key = e.key;\n\n                if (key === 'Backspace')\n                {\n                    this._delete();\n                }\n                else if (key === 'Escape' || key === 'Enter')\n                {\n                    this.stopEditing();\n                    this.onEnter.emit(this.value);\n                }\n                else if (key.length === 1) this._add(key);\n            });\n        }\n\n        this.onEnter = new Signal();\n        this.onChange = new Signal();\n\n        Ticker.shared.add((delta) => this.update(delta));\n    }\n\n    private _add(key: string): void\n    {\n        if (!this.editing)\n        {\n            return;\n        }\n\n        if (this.options.maxLength && this.value.length >= this.options.maxLength)\n        {\n            return;\n        }\n\n        this.value = this.value + key;\n\n        this.onChange.emit(this.value);\n    }\n\n    private _delete(): void\n    {\n        if (!this.editing || this.value.length === 0) return;\n        const array = this.value.split('');\n\n        array.pop();\n        this.value = array.join('');\n\n        this.onChange.emit(this.value);\n    }\n\n    private _startEditing(): void\n    {\n        this.tick = 0;\n        this.editing = true;\n        this.placeholder.visible = false;\n        this._cursor.alpha = 1;\n\n        if (utils.isMobile.any)\n        {\n            const keyboard = document.getElementById('v-keyboard') as HTMLInputElement;\n\n            keyboard.focus();\n            keyboard.click();\n            keyboard.value = this.value;\n        }\n\n        this.align();\n    }\n\n    private handleActivation()\n    {\n        this.stopEditing();\n\n        if (this.activation)\n        {\n            this._startEditing();\n\n            this.activation = false;\n        }\n    }\n\n    private stopEditing(): void\n    {\n        this._cursor.alpha = 0;\n        this.editing = false;\n\n        if (this.inputField.text === '')\n        {\n            this.placeholder.visible = true;\n        }\n\n        if (this.value.length === 0) this.placeholder.visible = true;\n        if (utils.isMobile.any) document.getElementById('v-keyboard')?.blur();\n\n        this.align();\n    }\n\n    private update(dt: number): void\n    {\n        if (!this.editing) return;\n        this.tick += dt * 0.1;\n        this._cursor.alpha = Math.round((Math.sin(this.tick) * 0.5) + 0.5);\n    }\n\n    private align()\n    {\n        const align = this.getAlign();\n\n        this.inputField.anchor.set(align, 0.5);\n        this.inputField.x = (this.bg.width * align) + (align === 1 ? -this.padding : this.padding);\n        this.inputField.y = this.bg.height / 2;\n\n        this.placeholder.anchor.set(align, 0.5);\n        this.placeholder.x = (this.bg.width * align) + (align === 1 ? -this.padding : this.padding);\n        this.placeholder.y = this.bg.height / 2;\n\n        this._cursor.x = this.getCursorPosX();\n        this._cursor.y = this.inputField.y;\n    }\n\n    private get padding(): number\n    {\n        return this.options.padding | 0;\n    }\n\n    private getAlign(): 0 | 1 | 0.5\n    {\n        const maxWidth = this.bg.width * 0.95;\n        const isOverflowed = this.inputField.width + (this.padding * 3) > maxWidth;\n\n        if (isOverflowed)\n        {\n            return this.editing ? 1 : 0;\n        }\n        switch (this.options.align)\n        {\n            case 'left':\n                return 0;\n            case 'center':\n                return 0.5;\n            case 'right':\n                return 1;\n            default:\n                return 0;\n        }\n    }\n\n    private getCursorPosX()\n    {\n        const align = this.getAlign();\n\n        switch (align)\n        {\n            case 0:\n                return this.inputField.x + this.inputField.width;\n            case 0.5:\n                return this.inputField.x + (this.inputField.width * 0.5);\n            case 1:\n                return this.inputField.x;\n            default:\n                return 0;\n        }\n    }\n\n    /** Sets the input text. */\n    set value(text: string)\n    {\n        this.inputField.text = text;\n\n        if (text.length !== 0)\n        {\n            this.placeholder.visible = false;\n        }\n        else\n        {\n            this.placeholder.visible = !this.editing;\n        }\n\n        this.align();\n    }\n\n    /** Return text of the input. */\n    get value(): string\n    {\n        return this.inputField.text;\n    }\n}\n","import { Container } from '@pixi/display';\n\nexport type LayoutType = 'horizontal' | 'vertical';\n\nexport type LayoutOptions = {\n    elementsMargin?: number;\n    children?: Container[];\n    vertPadding?: number;\n    horPadding?: number;\n};\n\n/**\n * Container-based element for arranging Pixi containers based on their sizes.\n *\n * It is used inside elements with repeatable content, like {@link Select} or {@link ScrollBox}.\n * @example\n * ```\n * const layout = new Layout({\n *    children: [\n        new Graphics().beginFill(0x000000).drawRect(0, 0, 50, 50),\n        new Graphics().beginFill(0xFFFFFF).drawRect(0, 0, 50, 50),\n *    ],\n * });\n *\n * layout.addChild(new Graphics().beginFill(0x000000).drawRect(0, 0, 50, 50));\n * ```\n */\nexport class Layout extends Container\n{\n    private readonly options?: { type?: LayoutType } & LayoutOptions;\n\n    /** Container, that holds all inner elements. */\n    public view: Container;\n\n    /** Arrange direction. */\n    public type: LayoutType;\n\n    /** Returns all arranged elements. */\n    public override readonly children: Container[] = [];\n\n    constructor(options?: { type?: LayoutType } & LayoutOptions)\n    {\n        super();\n\n        this.options = options;\n\n        if (options?.type)\n        {\n            this.type = options.type;\n        }\n\n        if (options?.children)\n        {\n            options.children.map((child) => this.addChild(child));\n        }\n    }\n\n    protected override onChildrenChange()\n    {\n        let x = this.options?.horPadding ?? 0;\n        let y = this.options?.vertPadding ?? 0;\n\n        const elementsMargin = this.options?.elementsMargin ?? 0;\n\n        this.children.forEach((child) =>\n        {\n            if (!this.type && x + child.width >= this.parent.width)\n            {\n                y += elementsMargin + child.height;\n                x = this.options?.horPadding ?? 0;\n\n                child.x = x;\n                child.y = y;\n            }\n            else\n            {\n                child.x = x;\n                child.y = y;\n            }\n\n            switch (this.type)\n            {\n                case 'horizontal':\n                    x += elementsMargin + child.width;\n                    break;\n\n                case 'vertical':\n                    y += elementsMargin + child.height;\n                    break;\n\n                default:\n                    x += elementsMargin + child.width;\n                    break;\n            }\n        });\n    }\n}\n","import { Texture } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { Graphics } from '@pixi/graphics';\nimport { Sprite } from '@pixi/sprite';\nimport { getView } from './utils/helpers/view';\n\nexport type MaskedFrameOptions = {\n    target: string | Container;\n    mask: string | Graphics;\n    borderWidth?: number;\n    borderColor?: number;\n};\n\n/**\n * Draws a border or apply a mask of any shape to a container.\n * @example\n * ```\n * new MaskedFrame({\n *     target: `avatar.png`,\n *     mask: `avatar_mask.png`,\n *     borderWidth: 5,\n *     borderColor: 0xFFFFFF,\n * });\n * ```\n */\nexport class MaskedFrame extends Graphics\n{\n    /** Target container. */\n    public target: Container;\n\n    /** Mask to apply. */\n    public targetMask: Container;\n\n    /** Border color. */\n    public borderColor: number;\n\n    /** Border width. */\n    public borderWidth: number;\n\n    constructor({ target, mask, borderWidth, borderColor }: MaskedFrameOptions)\n    {\n        super();\n\n        this.borderColor = borderColor;\n        this.borderWidth = borderWidth;\n\n        this.target = getView(target);\n        this.targetMask = getView(mask);\n        this.target.addChild(this.targetMask);\n        this.target.mask = this.targetMask;\n\n        if (borderWidth)\n        {\n            this.showBorder();\n\n            this.target.x = borderWidth;\n            this.target.y = borderWidth;\n\n            const borderMask = typeof mask === 'string' ? new Sprite(Texture.from(mask)) : mask.clone();\n\n            borderMask.width += borderWidth * 2;\n            borderMask.height += borderWidth * 2;\n\n            this.mask = borderMask;\n            this.addChild(borderMask);\n        }\n\n        this.addChild(this.target);\n    }\n\n    /** Shows a border. */\n    public showBorder()\n    {\n        this.beginFill(this.borderColor);\n\n        const width = this.borderWidth * 2;\n\n        this.drawRect(0, 0, this.target.width + width, this.target.height + width);\n    }\n\n    /** Hides a border. */\n    public hideBorder()\n    {\n        this.clear();\n    }\n}\n","import { Container } from '@pixi/display';\nimport { Graphics } from '@pixi/graphics';\nimport { Sprite } from '@pixi/sprite';\nimport { ITextStyle, TextStyle } from '@pixi/text';\nimport { Signal } from 'typed-signals';\nimport { CheckBox } from './CheckBox';\nimport { Layout, LayoutType } from './Layout';\n\nexport type GraphicsType = {\n    color: number;\n    fillColor?: number;\n    width?: number;\n    height?: number;\n    radius?: number;\n    padding?: number;\n};\n\nexport type RadioBoxStyle = {\n    bg: string | GraphicsType;\n    checked: string | GraphicsType;\n    textStyle?: TextStyle | Partial<ITextStyle>;\n};\n\nexport type RadioBoxOptions = {\n    items: string[];\n    type: LayoutType;\n    elementsMargin: number;\n    style: RadioBoxStyle;\n    selectedItem?: number;\n};\n\n/**\n * Creates a container-based group of checkbox elements, that can be used as radio buttons.\n *\n * Only one checkbox can be selected at a time.\n * @example\n * ```\n * new RadioGroup({\n *     selectedItem: 0,\n *     items: ['Option 1', 'Option 2', 'Option 3'],\n *     style: {\n *         bg: 'radio.png',\n *         checked: 'radio_checked.png'\n *     },\n * });\n *\n * ```\n */\nexport class RadioGroup extends Container\n{\n    private readonly options: RadioBoxOptions;\n    private items: CheckBox[] = [];\n\n    /** {@link Layout}, that holds and control all inned checkboxes.S  */\n    public innerView: Layout;\n\n    /** Text value of the selected item. */\n    public value: string;\n\n    /** ID of the selected item. */\n    public selected: number;\n\n    /** Fires, when new item is selected. */\n    public onChange: Signal<(selectedItemID: number, selectedVal: string) => void>;\n\n    constructor(options: RadioBoxOptions)\n    {\n        super();\n\n        this.options = options;\n        this.value = options.items[options.selectedItem];\n\n        this.selected = options.selectedItem;\n\n        this.innerView = new Layout({\n            type: options.type,\n            elementsMargin: options.elementsMargin\n        });\n\n        options.items.forEach((item, id) =>\n        {\n            const unchecked = this.getView(options.style.bg);\n            const checked = this.getView(options.style.checked);\n\n            const checkBox = new CheckBox({\n                text: item,\n                checked: options.selectedItem === id,\n                style: {\n                    unchecked,\n                    checked,\n                    text: options.style.textStyle\n                }\n            });\n\n            this.innerView.addChild(checkBox);\n\n            checkBox.onChange.connect(() => this.selectItem(id));\n\n            this.items.push(checkBox);\n\n            this.innerView.addChild(checkBox);\n        });\n\n        this.onChange = new Signal();\n    }\n\n    private getView(view: string | GraphicsType): Container\n    {\n        if (typeof view === 'string')\n        {\n            return Sprite.from(view);\n        }\n\n        return this.getGraphics(view as GraphicsType);\n    }\n\n    private getGraphics({ color, fillColor, width, height, radius, padding }: GraphicsType)\n    {\n        const graphics = new Graphics().beginFill(color);\n\n        const isCircle = width === height && radius >= width / 2;\n\n        if (isCircle)\n        {\n            graphics.drawCircle(width / 2, width / 2, width / 2);\n        }\n        else\n        {\n            graphics.drawRoundedRect(0, 0, width, height, radius);\n        }\n\n        if (fillColor !== undefined)\n        {\n            graphics.beginFill(fillColor);\n\n            const center = width / 2;\n\n            if (isCircle)\n            {\n                graphics.drawCircle(center, center, center - padding);\n            }\n            else\n            {\n                graphics.drawRoundedRect(padding, padding, width - (padding * 2), height - (padding * 2), radius);\n            }\n        }\n\n        return graphics;\n    }\n\n    /**\n     * Select item by ID.\n     * @param id\n     */\n    public selectItem(id: number)\n    {\n        this.items.forEach((item, key) =>\n        {\n            item.forceCheck(key === id);\n        });\n\n        this.value = this.options.items[id];\n\n        if (this.selected !== id)\n        {\n            this.onChange.emit(id, this.value);\n        }\n\n        this.selected = id;\n    }\n}\n","export interface SpringOptions\n{\n    max?: number;\n    damp?: number;\n    springiness?: number;\n}\n\nexport class Spring\n{\n    public x: number;\n    public ax: number;\n    public dx: number;\n    public tx: number;\n\n    private _options: SpringOptions;\n\n    constructor(options: SpringOptions = {})\n    {\n        this.x = 0;\n        this.ax = 0;\n        this.dx = 0;\n        this.tx = 0;\n\n        // add opts to object for shared opts.\n        this._options = options;\n        this._options.max = options.max || 160;\n        this._options.damp = options.damp || 0.8;\n        this._options.springiness = options.springiness || 0.1;\n    }\n\n    update(): void\n    {\n        this.ax = (this.tx - this.x) * this._options.springiness;\n\n        this.dx += this.ax;\n        this.dx *= this._options.damp;\n\n        if (this.dx < -this._options.max) this.dx = -this._options.max;\n        else if (this.dx > this._options.max) this.dx = this._options.max;\n\n        this.x += this.dx;\n    }\n\n    reset(): void\n    {\n        this.x = 0;\n        this.ax = 0;\n        this.dx = 0;\n        this.tx = 0;\n    }\n\n    get max(): number\n    {\n        return this._options.max;\n    }\n\n    set max(value: number)\n    {\n        this._options.max = value;\n    }\n\n    get damp(): number\n    {\n        return this._options.damp;\n    }\n\n    set damp(value: number)\n    {\n        this._options.damp = value;\n    }\n\n    get springiness(): number\n    {\n        return this._options.springiness;\n    }\n\n    set springiness(value: number)\n    {\n        this._options.springiness = value;\n    }\n}\n","import { Spring } from './Spring';\n\nexport default class ScrollSpring\n{\n    public done: boolean;\n    public to: number;\n\n    private _spring: Spring;\n    private _pos: number;\n    private _speed: number;\n    private _correctSpeed: boolean;\n\n    constructor()\n    {\n        this._spring = new Spring();\n        this._pos = 0;\n        this.to = 0;\n    }\n\n    start(speed: number, pos: number, to: number): void\n    {\n        this._speed = speed;\n        this._pos = pos;\n        this.to = to;\n        this.done = false;\n\n        this._spring.x = this._pos;\n        this._spring.tx = this.to;\n\n        const diff = this.to - this._pos;\n        const toDirection = Math.abs(diff) / diff;\n        const currentDirection = Math.abs(this._speed) / this._speed;\n\n        if (toDirection !== currentDirection)\n        {\n            this._correctSpeed = true;\n        }\n\n        else\n        {\n            this._correctSpeed = false;\n        }\n    }\n\n    update(): number\n    {\n        if (this._correctSpeed)\n        {\n            this._speed *= 0.6;\n\n            if (Math.abs(this._speed) < 2)\n            {\n                this._correctSpeed = false;\n            }\n\n            this._pos += this._speed;\n\n            this._spring.x = this._pos;\n        }\n\n        else\n        {\n            const diff = this.to - this._pos;\n\n            if (Math.abs(diff) < 0.05)\n            {\n                this._pos = this.to;\n                this.done = true;\n            }\n\n            else\n            {\n                this._spring.tx = this.to;\n                this._spring.update();\n                this._pos = this._spring.x;\n            }\n        }\n\n        return this._pos;\n    }\n\n    cancel(): void\n    {\n        // matches jux interface\n    }\n}\n","import ScrollSpring from './ScrollSpring';\n\nexport interface SlidingNumberOptions\n{\n    constrain?: boolean\n    maxSpeed?: number;\n    ease?: ConstrainEase\n}\n\nexport interface ConstrainEase\n{\n    done: boolean;\n    to: number;\n    start(speed: number, pos: number, to: number): void;\n    update(): number;\n}\n\nexport class SlidingNumber\n{\n    public position = 0;\n    public constrain = true;\n    public min = 0; // the window width of the drag\n    public max = 0; // the window width of the drag\n    public maxSpeed = 400;\n\n    private _ease: ConstrainEase;\n\n    private _offset = 0;\n    private _prev = 0;\n    private _speed = 0;\n    private _hasStopped: boolean;\n\n    private _targetSpeed = 0;\n    private _speedChecker = 0;\n    private _grab = 0;\n    private _activeEase: ConstrainEase;\n\n    constructor(options: SlidingNumberOptions = {})\n    {\n        this.constrain = options.constrain ?? true;\n        this.maxSpeed = options.maxSpeed ?? 400;\n        this._ease = options.ease ?? new ScrollSpring();\n    }\n\n    set value(n: number)\n    {\n        this._speed = 0;\n        this.position = n;\n    }\n\n    get value(): number\n    {\n        return this.position;\n    }\n\n    public grab(offset: number): void\n    {\n        this._grab = offset;\n        this._offset = this.position - offset;\n        this._speedChecker = 0;\n        this._targetSpeed = this._speed = 0;\n        this._hasStopped = false;\n    }\n\n    public hold(newPosition: number): void\n    {\n        this._speedChecker++;\n\n        this.position = newPosition + this._offset;\n\n        if (this._speedChecker > 1)\n        {\n            this._targetSpeed = this.position - this._prev;\n        }\n\n        this._speed += (this._targetSpeed - this._speed) / 2;\n\n        if (this._speed > this.maxSpeed) this._speed = this.maxSpeed;\n        else if (this._speed < -this.maxSpeed) this._speed = -this.maxSpeed;\n\n        this._prev = this.position;\n\n        if (this.constrain)\n        {\n            this._activeEase = null;\n\n            if (this.position > this.min)\n            {\n                this.position -= (this.position - this.min) / 1.5;\n            }\n            else if (this.position < this.max)\n            {\n                this.position += (this.max - this.position) / 1.5;\n            }\n        }\n    }\n\n    public slide(): void\n    {\n        if (this._hasStopped) return;\n\n        if (this.constrain)\n        {\n            this._updateConstrain();\n        }\n        else\n        {\n            this._updateDefault();\n        }\n    }\n\n    get moveAmount(): number\n    {\n        return -(this.position - this._offset - this._grab);\n    }\n\n    private _updateDefault(): void\n    {\n        this._speed *= 0.9;\n        this.position += this._speed;\n\n        if ((this._speed < 0 ? this._speed * -1 : this._speed) < 0.01)\n        {\n            this._hasStopped = true;\n        }\n    }\n\n    private _updateConstrain(): void\n    {\n        const max: number = this.max;\n\n        if (this.position > this.min || this.position < max || this._activeEase)\n        {\n            if (!this._activeEase)\n            {\n                this._activeEase = this._ease;\n\n                if (this.position > this.min)\n                {\n                    this._activeEase.start(this._speed, this.position, this.min);\n                }\n                else\n                {\n                    this._activeEase.start(this._speed, this.position, max);\n                }\n            }\n\n            this.position = this._activeEase.update();\n\n            if (this._activeEase.done)\n            {\n                this.position = this._activeEase.to;\n                this._speed = 0;\n                this._activeEase = null;\n            }\n        }\n        else\n        {\n            this._updateDefault();\n        }\n    }\n}\n","import { Point, Rectangle } from '@pixi/core';\nimport { ConstrainEase, SlidingNumber } from './SlidingNumber';\n\ninterface TrackpadOptions\n{\n    /** override the easing function when constraining */\n    xEase?: ConstrainEase;\n    yEase?: ConstrainEase;\n\n    maxSpeed?: number\n    constrain?: boolean\n}\n\n/** A track pad class that lets you scroll both in al directions. Its up to you to hook up the events. */\nexport class Trackpad\n{\n    public xAxis: SlidingNumber;\n    public yAxis: SlidingNumber;\n\n    private _isDown: boolean;\n    private _globalPosition: Point;\n    private _frame: Rectangle;\n    private _bounds: Rectangle;\n    private _dirty: boolean;\n\n    constructor(options: TrackpadOptions)\n    {\n        this.xAxis = new SlidingNumber({\n            ease: options.xEase,\n            maxSpeed: options.maxSpeed,\n            constrain: options.constrain,\n        });\n\n        this.yAxis = new SlidingNumber({\n            ease: options.yEase,\n            maxSpeed: options.maxSpeed,\n            constrain: options.constrain,\n        });\n\n        this._frame = new Rectangle();\n\n        this._bounds = new Rectangle();\n        this._globalPosition = new Point();\n    }\n\n    public pointerDown(pos: Point): void\n    {\n        this.xAxis.grab(pos.x);\n        this.yAxis.grab(pos.y);\n        this._isDown = true;\n    }\n\n    public pointerUp(): void\n    {\n        this._isDown = false;\n    }\n\n    public pointerMove(pos: Point): void\n    {\n        this._globalPosition = pos;\n    }\n\n    public update(): void\n    {\n        if (this._dirty)\n        {\n            this._dirty = false;\n\n            this.xAxis.min = this._bounds.left;\n            this.xAxis.min = this._bounds.right - this._frame.width;\n\n            this.xAxis.min = this._bounds.top;\n            this.xAxis.min = this._bounds.bottom - this._frame.height;\n        }\n\n        if (this._isDown)\n        {\n            this.xAxis.hold(this._globalPosition.x);\n            this.yAxis.hold(this._globalPosition.y);\n        }\n        else\n        {\n            this.xAxis.slide();\n            this.yAxis.slide();\n        }\n    }\n\n    public resize(w: number, h: number): void\n    {\n        this._frame.x = 0;\n        this._frame.width = w;\n\n        this._frame.y = 0;\n        this._frame.height = h;\n\n        this._dirty = true;\n    }\n\n    public setBounds(minX: number, maxX: number, minY: number, maxY: number): void\n    {\n        this._bounds.x = minX;\n        this._bounds.width = maxX - minX;\n        this._bounds.y = minY;\n        this._bounds.height = maxY - minY;\n\n        this._dirty = true;\n    }\n\n    get x(): number\n    {\n        return this.xAxis.value;\n    }\n\n    get y(): number\n    {\n        return this.yAxis.value;\n    }\n}\n","import { Ticker } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { FederatedPointerEvent } from '@pixi/events';\nimport { Graphics } from '@pixi/graphics';\nimport { Sprite } from '@pixi/sprite';\nimport type { LayoutType } from './Layout';\nimport { Layout } from './Layout';\nimport { removeHitBox } from './utils/helpers/hitbox';\nimport ScrollSpring from './utils/trackpad/ScrollSpring';\nimport { Trackpad } from './utils/trackpad/Trackpad';\n\nexport type ScrollBoxOptions = {\n    type?: LayoutType;\n    background?: number | string;\n    width?: number;\n    height?: number;\n    radius?: number;\n    elementsMargin?: number;\n    items?: Container[];\n    disableDynamicRendering?: boolean;\n    vertPadding?: number;\n    horPadding?: number;\n    padding?: number;\n};\n\n/**\n * Scrollable view, for arranging lists of Pixi container-based elements.\n *\n * Items, that are out of the visible area, are not rendered.\n * @example\n * ```\n * new ScrollBox({\n *     background: 0XFFFFFF,\n *     items: [\n *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n *     ],\n * });\n * ```\n */\n\nexport class ScrollBox extends Container\n{\n    private background: Graphics | Sprite;\n    private borderMask: Graphics;\n    private lastWidth: number;\n    private lastHeight: number;\n    private __width = 0;\n    private __height = 0;\n\n    private readonly onMouseScrollBinded: (event: any) => void;\n\n    private readonly layout: Layout;\n\n    private readonly freeSlot = {\n        x: 0,\n        y: 0,\n    };\n\n    private _trackpad: Trackpad;\n    private isDragging = 0;\n    private childrenInteractiveStorage: boolean[] = [];\n    private ticker = Ticker.shared;\n    private readonly options: ScrollBoxOptions;\n\n    constructor(options: ScrollBoxOptions)\n    {\n        super();\n\n        this.options = options;\n        this.addBackground();\n\n        this.__width = options.width | this.background.width;\n        this.__height = options.height | this.background.height;\n\n        if (!options.vertPadding)\n        {\n            options.vertPadding = options.padding ?? 0;\n        }\n\n        if (!options.horPadding)\n        {\n            options.horPadding = options.padding ?? 0;\n        }\n\n        this.layout = new Layout({\n            type: options.type,\n            elementsMargin: options.elementsMargin,\n            vertPadding: options.vertPadding,\n            horPadding: options.horPadding,\n        });\n\n        super.addChild(this.layout);\n\n        if (options.items?.length)\n        {\n            options.items.forEach((item) =>\n            {\n                this.addItem(item);\n            });\n        }\n\n        if (this.hasBounds)\n        {\n            this.addMask();\n            this.makeScrollable();\n        }\n\n        this.onMouseScrollBinded = this.onMouseScroll.bind(this);\n\n        const spring = new ScrollSpring();\n\n        this._trackpad = new Trackpad({\n            constrain: true,\n            yEase: spring,\n        });\n\n        this._trackpad.xAxis.value = 0;\n        this._trackpad.yAxis.value = 0;\n\n        this.resize();\n\n        this.ticker.add(this.update, this);\n    }\n\n    private get hasBounds(): boolean\n    {\n        return !!this.__width || !!this.__height;\n    }\n\n    protected override onChildrenChange()\n    {\n        // do nothing we manage this in addItem\n    }\n\n    /**\n     * Adds an item to a scrollable list.\n     * @param {...any} items\n     */\n    public addItem<T extends Container[]>(...items: T): T[0]\n    {\n        if (items.length > 1)\n        {\n            items.forEach((item) => this.addItem(item));\n        }\n        else\n        {\n            const child = items[0];\n\n            if (!child.width || !child.height)\n            {\n                console.error('ScrollBox item should have size');\n            }\n\n            child.x = this.freeSlot.x;\n            child.y = this.freeSlot.y;\n\n            this.layout.addChild(child);\n\n            if (!this.options.disableDynamicRendering)\n            {\n                child.renderable = this.isItemVisible(child);\n            }\n\n            const elementsMargin = this.options?.elementsMargin ?? 0;\n\n            switch (this.options.type)\n            {\n                case 'horizontal':\n                    this.freeSlot.x += elementsMargin + child.width;\n                    break;\n\n                default:\n                    this.freeSlot.y += elementsMargin + child.height;\n                    break;\n            }\n        }\n\n        this.resize();\n\n        return items[0];\n    }\n\n    /**\n     * Removes an item from a scrollable list.\n     * @param itemID\n     */\n    public removeItem(itemID: number)\n    {\n        const child = this.layout.children[itemID];\n\n        if (!child)\n        {\n            return;\n        }\n\n        this.layout.removeChild(child);\n\n        this.resize();\n    }\n\n    /**\n     * Checks if the item is visible or scrolled out of the visible part of the view.* Adds an item to a scrollable list.\n     * @param item\n     */\n    public isItemVisible(item: Container): boolean\n    {\n        const isVertical = this.options.type === 'vertical' || !this.options.type;\n        let isVisible = false;\n        const layout = this.layout;\n\n        if (isVertical)\n        {\n            const posY = item.y + layout.y;\n\n            if (\n                posY + item.height + this.options.vertPadding >= 0\n                && posY - this.options.vertPadding - this.options.elementsMargin <= this.options.height\n            )\n            {\n                isVisible = true;\n            }\n        }\n        else\n        {\n            const posX = item.x + layout.x;\n\n            if (posX + item.width >= 0 && posX <= this.options.width)\n            {\n                isVisible = true;\n            }\n        }\n\n        return isVisible;\n    }\n\n    /** Returns all inner items in a list. */\n    public get items(): Container[] | []\n    {\n        return this.layout?.children ?? [];\n    }\n\n    private addBackground()\n    {\n        this.background = typeof this.options.background === 'string'\n            ? Sprite.from(this.options.background)\n            : new Graphics();\n\n        this.addChild(this.background);\n\n        this.resize();\n    }\n\n    private addMask()\n    {\n        this.borderMask = new Graphics();\n        super.addChild(this.borderMask);\n        this.mask = this.borderMask;\n        this.resize();\n    }\n\n    private makeScrollable()\n    {\n        this.on('pointerdown', (e: FederatedPointerEvent) =>\n        {\n            this.isDragging = 1;\n            this._trackpad.pointerDown(e.global);\n        });\n\n        this.on('pointerup', () =>\n        {\n            this.isDragging = 0;\n            this._trackpad.pointerUp();\n            this.restoreChildrenInteractivity();\n        });\n\n        this.on('pointerupoutside', () =>\n        {\n            this.isDragging = 0;\n            this._trackpad.pointerUp();\n            this.restoreChildrenInteractivity();\n        });\n\n        this.on('globalpointermove', (e: FederatedPointerEvent) =>\n        {\n            this._trackpad.pointerMove(e.global);\n\n            if (this.isDragging)\n            {\n                this.disableChildrenInteractivity();\n            }\n        });\n\n        const { onMouseHover, onMouseOut } = this;\n\n        this.on('mouseover', onMouseHover, this).on('mouseout', onMouseOut, this);\n    }\n\n    private disableChildrenInteractivity()\n    {\n        // prevent clicks on buttons\n        this.items.forEach((item, itemID) =>\n        {\n            if (!this.childrenInteractiveStorage[itemID])\n            {\n                this.childrenInteractiveStorage[itemID]\n                    = item.interactive === true;\n            }\n\n            item.interactive = false;\n        });\n    }\n\n    private restoreChildrenInteractivity()\n    {\n        // restore clicks on buttons\n        this.items.forEach((item, itemID) =>\n        {\n            const wasItemInteractive\n                = this.childrenInteractiveStorage[itemID] === true;\n\n            if (wasItemInteractive)\n            {\n                item.interactive = wasItemInteractive;\n\n                delete this.childrenInteractiveStorage[itemID];\n            }\n        });\n    }\n\n    private setInteractive(interactive: boolean)\n    {\n        this.interactive = interactive;\n    }\n\n    private get layoutHeight(): number\n    {\n        return this.layout.height + (this.options.vertPadding * 2);\n    }\n\n    private get layoutWidth(): number\n    {\n        return this.layout.width + (this.options.horPadding * 2);\n    }\n\n    /** Controls item positions and visibility. */\n    public resize(): void\n    {\n        this.renderAllItems();\n\n        if (\n            this.borderMask\n            && (this.lastWidth !== this.layoutWidth\n                || this.lastHeight !== this.layoutHeight)\n        )\n        {\n            const verPadding = this.options.vertPadding;\n            const horPadding = this.options.horPadding;\n\n            if (!this.options.width)\n            {\n                this.__width += this.layoutWidth;\n            }\n\n            if (!this.options.height)\n            {\n                this.__height += this.layoutHeight;\n            }\n\n            this.borderMask\n                .clear()\n                .lineStyle(0)\n                .beginFill(0xffffff)\n                .drawRoundedRect(\n                    0,\n                    0,\n                    this.__width,\n                    this.__height,\n                    this.options.radius | 0,\n                );\n            removeHitBox(this.borderMask);\n\n            if (\n                this.background instanceof Graphics\n                && typeof this.options.background === 'number'\n            )\n            {\n                this.background\n                    .clear()\n                    .lineStyle(0)\n                    .beginFill(this.options.background)\n                    .drawRect(\n                        0,\n                        0,\n                        this.__width + horPadding,\n                        this.__height + verPadding,\n                    );\n            }\n\n            if (this.options.type === 'horizontal')\n            {\n                this.setInteractive(this.layoutWidth > this.__width);\n            }\n            else\n            {\n                this.setInteractive(this.layoutHeight > this.__height);\n            }\n\n            this.lastWidth = this.layoutWidth;\n            this.lastHeight = this.layoutHeight;\n        }\n\n        if (this._trackpad)\n        {\n            const maxWidth\n                = this.borderMask.width\n                - this.layout.width\n                - (this.options.horPadding * 2);\n\n            const maxHeight\n                = this.borderMask.height\n                - this.layout.height\n                - (this.options.vertPadding * 2);\n\n            if (this.options.type === 'vertical')\n            {\n                this._trackpad.yAxis.max = -Math.abs(maxHeight);\n            }\n            else if (this.options.type === 'horizontal')\n            {\n                this._trackpad.xAxis.max = -Math.abs(maxWidth);\n            }\n            else\n            {\n                this._trackpad.yAxis.max = -Math.abs(maxHeight);\n                this._trackpad.xAxis.max = -Math.abs(maxWidth);\n            }\n        }\n\n        this.stopRenderHiddenItems();\n    }\n\n    private onMouseHover()\n    {\n        this.renderAllItems();\n\n        document.addEventListener('mousewheel', this.onMouseScrollBinded);\n        document.addEventListener('DOMMouseScroll', this.onMouseScrollBinded);\n    }\n\n    private onMouseOut()\n    {\n        this.stopRenderHiddenItems();\n\n        document.removeEventListener('mousewheel', this.onMouseScrollBinded);\n        document.removeEventListener(\n            'DOMMouseScroll',\n            this.onMouseScrollBinded,\n        );\n    }\n\n    private onMouseScroll(event: any): void\n    {\n        this.renderAllItems();\n\n        if (\n            this.options.type === 'horizontal'\n            && (typeof event.deltaX !== 'undefined'\n                || typeof event.deltaY !== 'undefined')\n        )\n        {\n            const targetPos = event.deltaY\n                ? this.layout.x - event.deltaY\n                : this.layout.x - event.deltaX;\n\n            if (\n                targetPos < 0\n                && targetPos + this.layoutWidth + this.options.horPadding\n                    < this.__width\n            )\n            {\n                this._trackpad.xAxis.value = this.__width - this.layoutWidth;\n            }\n            else if (targetPos > this.options.horPadding)\n            {\n                this._trackpad.xAxis.value = 0;\n            }\n            else\n            {\n                this._trackpad.xAxis.value = targetPos;\n            }\n        }\n        else if (typeof event.deltaY !== 'undefined')\n        {\n            const targetPos = this.layout.y - event.deltaY;\n\n            if (\n                targetPos < 0\n                && targetPos + this.layoutHeight + this.options.vertPadding\n                    < this.__height\n            )\n            {\n                this._trackpad.yAxis.value = this.__height - this.layoutHeight;\n            }\n            else if (targetPos > this.options.vertPadding)\n            {\n                this._trackpad.yAxis.value = 0;\n            }\n            else\n            {\n                this._trackpad.yAxis.value = targetPos;\n            }\n        }\n\n        this.stopRenderHiddenItems();\n    }\n\n    /** Makes it scroll down to the last element. */\n    public scrollBottom()\n    {\n        if (!this.interactive)\n        {\n            this.scrollTop();\n        }\n        else\n        {\n            this.scrollTo(this.layout.children.length - 1);\n        }\n    }\n\n    /** Makes it scroll up to the first element. */\n    public scrollTop()\n    {\n        this._trackpad.xAxis.value = 0;\n        this._trackpad.yAxis.value = 0;\n    }\n\n    private renderAllItems()\n    {\n        if (this.options.disableDynamicRendering)\n        {\n            return;\n        }\n\n        this.items.forEach((child) =>\n        {\n            child.renderable = true;\n        });\n    }\n\n    private stopRenderHiddenItems()\n    {\n        if (this.options.disableDynamicRendering)\n        {\n            return;\n        }\n\n        this.items.forEach((child) =>\n        {\n            child.renderable = this.isItemVisible(child);\n        });\n    }\n\n    /**\n     * Scrolls to the element with the given ID.\n     * @param elementID\n     */\n    public scrollTo(elementID: number)\n    {\n        if (!this.interactive)\n        {\n            return;\n        }\n\n        const target = this.layout.children[elementID];\n\n        if (!target)\n        {\n            return;\n        }\n\n        this._trackpad.xAxis.value\n            = this.options.type === 'horizontal'\n                ? this.__width\n                  - target.x\n                  - target.width\n                  - this.options.horPadding\n                : 0;\n\n        this._trackpad.yAxis.value\n            = !this.options.type || this.options.type === 'vertical'\n                ? this.__height\n                  - target.y\n                  - target.height\n                  - this.options.vertPadding\n                : 0;\n    }\n\n    /** Gets component height. */\n    public override get height(): number\n    {\n        return this.__height;\n    }\n\n    /** Gets component width. */\n    public override get width(): number\n    {\n        return this.__width;\n    }\n\n    private update()\n    {\n        this._trackpad.update();\n\n        if (this.options.type === 'horizontal')\n        {\n            if (this.layout.x !== this._trackpad.x)\n            {\n                this.renderAllItems();\n                this.layout.x = this._trackpad.x;\n            }\n            else\n            {\n                this.stopRenderHiddenItems();\n            }\n        }\n        else\n        if (this.layout.y !== this._trackpad.y)\n        {\n            this.renderAllItems();\n            this.layout.y = this._trackpad.y;\n        }\n        else\n        {\n            this.stopRenderHiddenItems();\n        }\n    }\n}\n","import { Container } from '@pixi/display';\nimport { Graphics } from '@pixi/graphics';\nimport { Text, TextStyle } from '@pixi/text';\nimport { Signal } from 'typed-signals';\nimport { FancyButton } from './FancyButton';\nimport { ScrollBox, ScrollBoxOptions } from './ScrollBox';\nimport { getView } from './utils/helpers/view';\n\nconst defaultVisibleItems = 5;\n\ntype Offset = {\n    y: number;\n    x: number;\n};\n\nexport type SelectItemsOptions = {\n    items: string[];\n    backgroundColor: number;\n    hoverColor?: number;\n    width?: number;\n    height?: number;\n    textStyle?: Partial<TextStyle>;\n    radius?: number;\n};\n\nexport type SelectOptions = {\n    closedBG: string | Container;\n    openBG?: string | Container;\n    textStyle?: Partial<TextStyle>;\n    selected?: number;\n    selectedTextOffset?: { x?: number; y?: number };\n\n    items: SelectItemsOptions;\n\n    scrollBoxOffset?: { x?: number; y?: number };\n    scrollBoxWidth?: number;\n    scrollBoxHeight?: number;\n    scrollBoxRadius?: number;\n\n    visibleItems?: number;\n\n    scrollBox?: ScrollBoxOptions & {\n        offset?: Offset;\n    };\n};\n\n/**\n * Container-based component that gives us a selection dropdown.\n *\n * It is a composition of a {@link Button} and a {@link ScrollBox}.\n * @example\n * ```\n * new Select({\n *     closedBG: `select_closed.png`,\n *     openBG: `select_open.png`,\n *     textStyle: { fill: 0xffffff, fontSize: 20 },\n *     items: {\n *         items,\n *         backgroundColor: 0x000000,\n *         hoverColor: 0x000000,\n *         width: 200,\n *         height: 50,\n *     },\n *     scrollBox: {\n *         width: 200,\n *         height: 350,\n *         radius: 30,\n *     },\n * });\n *\n * ```\n */\n\n// TODO: rewrite this basing on Swich\nexport class Select extends Container\n{\n    private readonly openButton: FancyButton;\n    private readonly closeButton: FancyButton;\n    private readonly openView: Container;\n    private scrollBox: ScrollBox;\n\n    /** Selected value ID. */\n    public value: number;\n\n    /** Fires when selected value is changed. */\n    public onSelect: Signal<(value: number, text: string) => void>;\n\n    constructor({ closedBG, textStyle, items, openBG, selected, selectedTextOffset, scrollBox, visibleItems }: SelectOptions)\n    {\n        super();\n\n        this.openButton = new FancyButton({\n            defaultView: getView(closedBG),\n            text: new Text(items?.items ? items.items[0] : '', textStyle),\n            textOffset: selectedTextOffset\n        });\n        this.openButton.onPress.connect(() => this.toggle());\n        this.addChild(this.openButton);\n\n        this.openView = getView(openBG);\n        this.openView.visible = false;\n        this.addChild(this.openView);\n\n        const defaultView = new Graphics()\n            .beginFill(0x000000, 0.00001)\n            .drawRect(0, 0, this.openButton.width, this.openButton.height);\n\n        this.closeButton = new FancyButton({\n            defaultView,\n            text: new Text(items?.items ? items.items[0] : '', textStyle),\n            textOffset: selectedTextOffset\n        });\n        this.closeButton.onPress.connect(() => this.toggle());\n        this.openView.addChild(this.closeButton);\n\n        this.scrollBox = new ScrollBox({\n            type: 'vertical',\n            elementsMargin: 0,\n            width: this.openButton.width,\n            height: this.openButton.height * (visibleItems ?? defaultVisibleItems),\n            radius: 0,\n            padding: 0,\n            ...scrollBox\n        });\n        this.scrollBox.y = this.openButton.height;\n        this.openView.addChild(this.scrollBox);\n\n        if (scrollBox?.offset)\n        {\n            this.scrollBox.x += scrollBox.offset.x ?? 0;\n            this.scrollBox.y += scrollBox.offset.y ?? 0;\n        }\n\n        this.onSelect = new Signal();\n\n        this.convertItemsToButtons(items).forEach((button, id) =>\n        {\n            const text = button.text;\n\n            if (id === selected)\n            {\n                this.openButton.text = text;\n                this.closeButton.text = text;\n            }\n\n            button.onPress.connect(() =>\n            {\n                this.value = id;\n                this.onSelect.emit(id, text);\n                this.openButton.text = text;\n                this.closeButton.text = text;\n                this.close();\n            });\n\n            this.scrollBox.addItem(button);\n        });\n    }\n\n    /** Toggle the select state (open if closed, closes - id open). */\n    public toggle()\n    {\n        this.openView.visible = !this.openView.visible;\n        this.openButton.visible = !this.openButton.visible;\n    }\n\n    /** Show dropdown. */\n    public open()\n    {\n        this.openView.visible = true;\n        this.openButton.visible = false;\n    }\n\n    /** Hide dropdown. */\n    public close()\n    {\n        this.openView.visible = false;\n        this.openButton.visible = true;\n    }\n\n    private convertItemsToButtons({\n        items,\n        backgroundColor,\n        hoverColor,\n        width,\n        height,\n        textStyle,\n        radius\n    }: SelectItemsOptions): FancyButton[]\n    {\n        const buttons: FancyButton[] = [];\n\n        items.forEach((item) =>\n        {\n            const defaultView = new Graphics().beginFill(backgroundColor).drawRoundedRect(0, 0, width, height, radius);\n\n            const color = hoverColor ?? backgroundColor;\n            const hoverView = new Graphics().beginFill(color).drawRoundedRect(0, 0, width, height, radius);\n            const text = new Text(item, textStyle);\n            const button = new FancyButton({ defaultView, hoverView, text });\n\n            buttons.push(button);\n        });\n\n        return buttons;\n    }\n}\n","import { Container } from '@pixi/display';\nimport { FederatedPointerEvent } from '@pixi/events';\nimport { ITextStyle, TextStyle } from '@pixi/text';\nimport { Signal } from 'typed-signals';\n\nimport type { DragObject } from './utils/HelpTypes';\nimport { SliderBase } from './SliderBase';\n\nexport type SliderOptions = {\n    bg: Container | string;\n    slider: Container | string;\n    fill?: Container | string;\n    min?: number;\n    max?: number;\n    value?: number;\n    valueTextStyle?: TextStyle | Partial<ITextStyle>;\n    showValue?: boolean;\n    valueTextOffset?: {\n        x?: number;\n        y?: number;\n    };\n    fillOffset?: {\n        x?: number;\n        y?: number;\n    };\n};\n\n/**\n * Creates a slider to select a single value.\n * @example\n * ```\n * new Slider({\n *     bg: 'slider_bg.png',\n *     fill: 'slider.png',\n *     slider: 'slider.png',\n *     min: 0,\n *     max: 100,\n *     value: 50,\n * });\n *\n * singleSlider.onChange.connect((value) => {\n *     console.log(`Slider changed to ${value}`);\n * });\n * ```\n */\nexport class Slider extends SliderBase\n{\n    private options: SliderOptions;\n\n    /** Fires when value changed, only when slider is released. */\n    public onChange: Signal<(value: number) => void> = new Signal();\n\n    /** Fires when value is changing, on every move of slider. */\n    public onUpdate: Signal<(value: number) => void> = new Signal();\n\n    constructor(options: SliderOptions)\n    {\n        super({\n            bg: options.bg,\n            slider1: options.slider,\n            fill: options.fill ?? '',\n            min: options.min,\n            max: options.max,\n            value1: options.value,\n            valueTextStyle: options.valueTextStyle,\n            showValue: options.showValue,\n            valueTextOffset: options.valueTextOffset,\n            fillOffset: options.fillOffset,\n        });\n\n        this.options = options;\n\n        this.value = options.value ?? 0;\n    }\n\n    /** Return selected value. */\n    get value(): number\n    {\n        return this._value1;\n    }\n\n    /** Set selected value. */\n    set value(value: number)\n    {\n        if (value === this._value1) return;\n\n        if (value < this.min) value = this.min;\n        if (value > this.max) value = this.max;\n\n        this._value1 = value;\n        this.progress = ((this.max - this.min) / 100) * value;\n\n        this.slider1.x = ((this.bg.width - this.slider1.width) / 100) * this.progress;\n\n        if (this.options.showValue)\n        {\n            this.value1Text.text = `${value}`;\n\n            const sliderPosX = this.slider1.x + (this.slider1.width / 2);\n            const sliderPosY = this.slider1.y;\n\n            this.value1Text.x = sliderPosX + (this.options.valueTextOffset?.x ?? 0);\n            this.value1Text.y = sliderPosY + (this.options.valueTextOffset?.y ?? 0);\n        }\n\n        this.onUpdate?.emit(this.value);\n    }\n\n    protected override update(event: FederatedPointerEvent)\n    {\n        if (!this.dragging) return;\n\n        const obj = event.currentTarget as DragObject;\n        const { x } = obj.parent.worldTransform.applyInverse(event.global);\n\n        const progress = this.validate((x / this.bg.width) * 100);\n\n        if (progress !== this.progress)\n        {\n            this.value = ((this.max - this.min) / 100) * progress;\n        }\n    }\n}\n"],"names":["Button","view","_e","enabled","e","Signal","_btn","_bth","utils","getView","Sprite","Switcher","Container","views","triggerEvents","activeViewID","stateView","id","event","newState","res","CheckBox","options","_a","unchecked","checked","Text","removeHitBox","obj","o","Rectangle","ProgressBar","bg","fill","fillOffset","progress","_b","offsetX","offsetY","Graphics","startPoint","endPoint","SliderBase","_c","sliderData","slider","container","_event","DoubleSlider","value1","_d","sliderPosX","sliderPosY","value2","x","slider1Dist","slider2Dist","getTextView","text","fitToView","parent","child","padding","scaleX","scaleY","maxWidth","maxHeight","widthOverflow","heightOverflow","states","FancyButton","defaultView","hoverView","pressedView","disabledView","offset","textOffset","iconOffset","anchor","anchorX","anchorY","icon","animations","ObservablePoint","Ticker","Group","currentView","activeView","state","_f","stateOffset","defaultStateOffset","data","Tween","Input","defaultTextStyle","textStyle","TextStyle","Texture","keyboard","value","maxLength","key","delta","array","dt","align","Layout","y","elementsMargin","MaskedFrame","target","mask","borderWidth","borderColor","borderMask","width","RadioGroup","item","checkBox","color","fillColor","height","radius","graphics","isCircle","center","Spring","ScrollSpring","speed","pos","to","diff","toDirection","currentDirection","SlidingNumber","n","newPosition","max","Trackpad","Point","w","h","minX","maxX","minY","maxY","ScrollBox","spring","items","itemID","isVertical","isVisible","layout","posY","posX","onMouseHover","onMouseOut","wasItemInteractive","interactive","verPadding","horPadding","targetPos","elementID","defaultVisibleItems","Select","closedBG","openBG","selected","selectedTextOffset","scrollBox","visibleItems","__spreadValues","button","backgroundColor","hoverColor","buttons","Slider"],"mappings":"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"}