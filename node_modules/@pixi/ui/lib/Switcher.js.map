{"version":3,"file":"Switcher.js","sources":["../src/Switcher.ts"],"sourcesContent":["import { Container } from '@pixi/display';\nimport { Signal } from 'typed-signals';\nimport { getView } from './utils/helpers/view';\nimport { Button } from './Button';\nimport { ButtonEvent } from './utils/HelpTypes';\n\n/**\n * Container based component that switches visibility of a given containers by any of the button events.\n *\n * By default it switches on press.\n *\n * Can be used for creating tabs, radio buttons, checkboxes etc.\n * @example\n * ```\n * // switch on click\n * const switch = new Swich([`switch_off.png`, `switch_on.png`]);\n *\n * // switch on hover\n * const button = new Swich([`button_default.png`, `button_hover.png`], ['onHover', 'onOut']);\n *\n * button.events.onPress.connect(() => console.log('button pressed'));\n *\n * ```\n */\nexport class Switcher extends Container\n{\n    private triggerEvents: Set<ButtonEvent>;\n\n    /** Container that holds all the content of the component. */\n    public innerView: Container;\n\n    /** The id of the visible(active) view. */\n    public active = 0;\n\n    /** Fired when active view changes. */\n    public onChange: Signal<(state: number | boolean) => void>;\n\n    /** Button events used to switch views. */\n    public events: Button;\n\n    /**\n     * @param {Array<Container | string>} views - Array of views or textures that will be switching.\n     * @param triggerEvents - Button events, to switch views (can be one event or an array of events).\n     * @param activeViewID - The id of the view, visible by default.\n     */\n    constructor(views: Array<Container | string>, triggerEvents?: ButtonEvent | ButtonEvent[], activeViewID = 0)\n    {\n        super();\n\n        this.innerView = new Container();\n        this.addChild(this.innerView);\n\n        this.active = activeViewID;\n\n        views.map((stateView, id) =>\n        {\n            const view = getView(stateView);\n\n            this.innerView.addChild(view);\n\n            view.visible = id === activeViewID;\n\n            return view;\n        });\n\n        this.onChange = new Signal();\n\n        if (triggerEvents)\n        {\n            if (Array.isArray(triggerEvents))\n            {\n                this.triggerEvents = new Set(triggerEvents);\n            }\n            else\n            {\n                this.triggerEvents = new Set([triggerEvents]);\n            }\n        }\n        else\n        {\n            this.triggerEvents = new Set(['onPress']);\n        }\n\n        this.events = new Button(this);\n\n        this.events.onPress.connect(() => this.switch(this.nextActive, 'onPress'));\n        this.events.onDown.connect(() => this.switch(this.nextActive, 'onDown'));\n        this.events.onUp.connect(() => this.switch(this.nextActive, 'onUp'));\n        this.events.onHover.connect(() => this.switch(this.nextActive, 'onHover'));\n        this.events.onOut.connect(() => this.switch(this.nextActive, 'onOut'));\n        this.events.onUpOut.connect(() => this.switch(this.nextActive, 'onUpOut'));\n    }\n\n    /** Returns the active view */\n    public get activeView(): Container\n    {\n        return this.views[this.active] as Container;\n    }\n\n    /** Returns all the switchable views */\n    get views(): Array<Container>\n    {\n        return this.innerView.children as Array<Container>;\n    }\n\n    /**\n     * Show a view by id, or to next one by order, if no ID provided.\n     * @param {number} id - optional id of the view to show.\n     * @param {ButtonEvent} event - optional event to use to switch views.\n     */\n    public switch(id?: number, event?: ButtonEvent): void\n    {\n        if (!this.triggerEvents.has(event))\n        {\n            return;\n        }\n\n        this.activeView.visible = false;\n        this.active = id !== undefined ? id : this.nextActive;\n\n        const newState = this.views[this.active];\n\n        newState.visible = true;\n\n        const res = this.views.length > 2 ? this.active : this.active === 1;\n\n        this.onChange.emit(res);\n    }\n\n    /**\n     * Switches a view to a given one without triggering the onChange event.\n     * @param {number} id\n     */\n    public forceSwitch(id: number): void\n    {\n        this.activeView.visible = false;\n        this.active = id !== undefined ? id : this.nextActive;\n\n        const newState = this.views[this.active];\n\n        newState.visible = true;\n    }\n\n    /** Returns the id of the next view in order. */\n    private get nextActive(): number\n    {\n        return this.active < this.views.length - 1 ? this.active + 1 : 0;\n    }\n}\n"],"names":["Container","view","getView","Signal","Button"],"mappings":"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"}