import { Container } from '@pixi/display';
import { Signal } from 'typed-signals';
import { Button } from './Button';
import { ButtonEvent } from './utils/HelpTypes';
/**
 * Container based component that switches visibility of a given containers by any of the button events.
 *
 * By default it switches on press.
 *
 * Can be used for creating tabs, radio buttons, checkboxes etc.
 * @example
 * ```
 * // switch on click
 * const switch = new Swich([`switch_off.png`, `switch_on.png`]);
 *
 * // switch on hover
 * const button = new Swich([`button_default.png`, `button_hover.png`], ['onHover', 'onOut']);
 *
 * button.events.onPress.connect(() => console.log('button pressed'));
 *
 * ```
 */
export declare class Switcher extends Container {
    private triggerEvents;
    /** Container that holds all the content of the component. */
    innerView: Container;
    /** The id of the visible(active) view. */
    active: number;
    /** Fired when active view changes. */
    onChange: Signal<(state: number | boolean) => void>;
    /** Button events used to switch views. */
    events: Button;
    /**
     * @param {Array<Container | string>} views - Array of views or textures that will be switching.
     * @param triggerEvents - Button events, to switch views (can be one event or an array of events).
     * @param activeViewID - The id of the view, visible by default.
     */
    constructor(views: Array<Container | string>, triggerEvents?: ButtonEvent | ButtonEvent[], activeViewID?: number);
    /** Returns the active view */
    get activeView(): Container;
    /** Returns all the switchable views */
    get views(): Array<Container>;
    /**
     * Show a view by id, or to next one by order, if no ID provided.
     * @param {number} id - optional id of the view to show.
     * @param {ButtonEvent} event - optional event to use to switch views.
     */
    switch(id?: number, event?: ButtonEvent): void;
    /**
     * Switches a view to a given one without triggering the onChange event.
     * @param {number} id
     */
    forceSwitch(id: number): void;
    /** Returns the id of the next view in order. */
    private get nextActive();
}
//# sourceMappingURL=Switcher.d.ts.map