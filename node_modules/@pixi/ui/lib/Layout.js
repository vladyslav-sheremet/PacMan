'use strict';

var display = require('@pixi/display');

class Layout extends display.Container {
  constructor(options) {
    super();
    /** Returns all arranged elements. */
    this.children = [];
    this.options = options;
    if (options?.type) {
      this.type = options.type;
    }
    if (options?.children) {
      options.children.map((child) => this.addChild(child));
    }
  }
  onChildrenChange() {
    let x = this.options?.horPadding ?? 0;
    let y = this.options?.vertPadding ?? 0;
    const elementsMargin = this.options?.elementsMargin ?? 0;
    this.children.forEach((child) => {
      if (!this.type && x + child.width >= this.parent.width) {
        y += elementsMargin + child.height;
        x = this.options?.horPadding ?? 0;
        child.x = x;
        child.y = y;
      } else {
        child.x = x;
        child.y = y;
      }
      switch (this.type) {
        case "horizontal":
          x += elementsMargin + child.width;
          break;
        case "vertical":
          y += elementsMargin + child.height;
          break;
        default:
          x += elementsMargin + child.width;
          break;
      }
    });
  }
}

exports.Layout = Layout;
//# sourceMappingURL=Layout.js.map
