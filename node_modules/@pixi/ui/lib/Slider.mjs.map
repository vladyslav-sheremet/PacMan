{"version":3,"file":"Slider.mjs","sources":["../src/Slider.ts"],"sourcesContent":["import { Container } from '@pixi/display';\nimport { FederatedPointerEvent } from '@pixi/events';\nimport { ITextStyle, TextStyle } from '@pixi/text';\nimport { Signal } from 'typed-signals';\n\nimport type { DragObject } from './utils/HelpTypes';\nimport { SliderBase } from './SliderBase';\n\nexport type SliderOptions = {\n    bg: Container | string;\n    slider: Container | string;\n    fill?: Container | string;\n    min?: number;\n    max?: number;\n    value?: number;\n    valueTextStyle?: TextStyle | Partial<ITextStyle>;\n    showValue?: boolean;\n    valueTextOffset?: {\n        x?: number;\n        y?: number;\n    };\n    fillOffset?: {\n        x?: number;\n        y?: number;\n    };\n};\n\n/**\n * Creates a slider to select a single value.\n * @example\n * ```\n * new Slider({\n *     bg: 'slider_bg.png',\n *     fill: 'slider.png',\n *     slider: 'slider.png',\n *     min: 0,\n *     max: 100,\n *     value: 50,\n * });\n *\n * singleSlider.onChange.connect((value) => {\n *     console.log(`Slider changed to ${value}`);\n * });\n * ```\n */\nexport class Slider extends SliderBase\n{\n    private options: SliderOptions;\n\n    /** Fires when value changed, only when slider is released. */\n    public onChange: Signal<(value: number) => void> = new Signal();\n\n    /** Fires when value is changing, on every move of slider. */\n    public onUpdate: Signal<(value: number) => void> = new Signal();\n\n    constructor(options: SliderOptions)\n    {\n        super({\n            bg: options.bg,\n            slider1: options.slider,\n            fill: options.fill ?? '',\n            min: options.min,\n            max: options.max,\n            value1: options.value,\n            valueTextStyle: options.valueTextStyle,\n            showValue: options.showValue,\n            valueTextOffset: options.valueTextOffset,\n            fillOffset: options.fillOffset,\n        });\n\n        this.options = options;\n\n        this.value = options.value ?? 0;\n    }\n\n    /** Return selected value. */\n    get value(): number\n    {\n        return this._value1;\n    }\n\n    /** Set selected value. */\n    set value(value: number)\n    {\n        if (value === this._value1) return;\n\n        if (value < this.min) value = this.min;\n        if (value > this.max) value = this.max;\n\n        this._value1 = value;\n        this.progress = ((this.max - this.min) / 100) * value;\n\n        this.slider1.x = ((this.bg.width - this.slider1.width) / 100) * this.progress;\n\n        if (this.options.showValue)\n        {\n            this.value1Text.text = `${value}`;\n\n            const sliderPosX = this.slider1.x + (this.slider1.width / 2);\n            const sliderPosY = this.slider1.y;\n\n            this.value1Text.x = sliderPosX + (this.options.valueTextOffset?.x ?? 0);\n            this.value1Text.y = sliderPosY + (this.options.valueTextOffset?.y ?? 0);\n        }\n\n        this.onUpdate?.emit(this.value);\n    }\n\n    protected override update(event: FederatedPointerEvent)\n    {\n        if (!this.dragging) return;\n\n        const obj = event.currentTarget as DragObject;\n        const { x } = obj.parent.worldTransform.applyInverse(event.global);\n\n        const progress = this.validate((x / this.bg.width) * 100);\n\n        if (progress !== this.progress)\n        {\n            this.value = ((this.max - this.min) / 100) * progress;\n        }\n    }\n}\n"],"names":[],"mappings":"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"}