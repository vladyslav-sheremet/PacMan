import { Container } from '@pixi/display';
import { Signal } from 'typed-signals';
import { getView } from './utils/helpers/view.mjs';
import { Button } from './Button.mjs';

class Switcher extends Container {
  /**
   * @param {Array<Container | string>} views - Array of views or textures that will be switching.
   * @param triggerEvents - Button events, to switch views (can be one event or an array of events).
   * @param activeViewID - The id of the view, visible by default.
   */
  constructor(views, triggerEvents, activeViewID = 0) {
    super();
    /** The id of the visible(active) view. */
    this.active = 0;
    this.innerView = new Container();
    this.addChild(this.innerView);
    this.active = activeViewID;
    views.map((stateView, id) => {
      const view = getView(stateView);
      this.innerView.addChild(view);
      view.visible = id === activeViewID;
      return view;
    });
    this.onChange = new Signal();
    if (triggerEvents) {
      if (Array.isArray(triggerEvents)) {
        this.triggerEvents = new Set(triggerEvents);
      } else {
        this.triggerEvents = /* @__PURE__ */ new Set([triggerEvents]);
      }
    } else {
      this.triggerEvents = /* @__PURE__ */ new Set(["onPress"]);
    }
    this.events = new Button(this);
    this.events.onPress.connect(() => this.switch(this.nextActive, "onPress"));
    this.events.onDown.connect(() => this.switch(this.nextActive, "onDown"));
    this.events.onUp.connect(() => this.switch(this.nextActive, "onUp"));
    this.events.onHover.connect(() => this.switch(this.nextActive, "onHover"));
    this.events.onOut.connect(() => this.switch(this.nextActive, "onOut"));
    this.events.onUpOut.connect(() => this.switch(this.nextActive, "onUpOut"));
  }
  /** Returns the active view */
  get activeView() {
    return this.views[this.active];
  }
  /** Returns all the switchable views */
  get views() {
    return this.innerView.children;
  }
  /**
   * Show a view by id, or to next one by order, if no ID provided.
   * @param {number} id - optional id of the view to show.
   * @param {ButtonEvent} event - optional event to use to switch views.
   */
  switch(id, event) {
    if (!this.triggerEvents.has(event)) {
      return;
    }
    this.activeView.visible = false;
    this.active = id !== void 0 ? id : this.nextActive;
    const newState = this.views[this.active];
    newState.visible = true;
    const res = this.views.length > 2 ? this.active : this.active === 1;
    this.onChange.emit(res);
  }
  /**
   * Switches a view to a given one without triggering the onChange event.
   * @param {number} id
   */
  forceSwitch(id) {
    this.activeView.visible = false;
    this.active = id !== void 0 ? id : this.nextActive;
    const newState = this.views[this.active];
    newState.visible = true;
  }
  /** Returns the id of the next view in order. */
  get nextActive() {
    return this.active < this.views.length - 1 ? this.active + 1 : 0;
  }
}

export { Switcher };
//# sourceMappingURL=Switcher.mjs.map
