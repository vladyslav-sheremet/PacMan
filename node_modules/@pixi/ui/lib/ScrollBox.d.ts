import { Container } from '@pixi/display';
import type { LayoutType } from './Layout';
export type ScrollBoxOptions = {
    type?: LayoutType;
    background?: number | string;
    width?: number;
    height?: number;
    radius?: number;
    elementsMargin?: number;
    items?: Container[];
    disableDynamicRendering?: boolean;
    vertPadding?: number;
    horPadding?: number;
    padding?: number;
};
/**
 * Scrollable view, for arranging lists of Pixi container-based elements.
 *
 * Items, that are out of the visible area, are not rendered.
 * @example
 * ```
 * new ScrollBox({
 *     background: 0XFFFFFF,
 *     items: [
 *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),
 *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),
 *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),
 *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),
 *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),
 *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),
 *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),
 *     ],
 * });
 * ```
 */
export declare class ScrollBox extends Container {
    private background;
    private borderMask;
    private lastWidth;
    private lastHeight;
    private __width;
    private __height;
    private readonly onMouseScrollBinded;
    private readonly layout;
    private readonly freeSlot;
    private _trackpad;
    private isDragging;
    private childrenInteractiveStorage;
    private ticker;
    private readonly options;
    constructor(options: ScrollBoxOptions);
    private get hasBounds();
    protected onChildrenChange(): void;
    /**
     * Adds an item to a scrollable list.
     * @param {...any} items
     */
    addItem<T extends Container[]>(...items: T): T[0];
    /**
     * Removes an item from a scrollable list.
     * @param itemID
     */
    removeItem(itemID: number): void;
    /**
     * Checks if the item is visible or scrolled out of the visible part of the view.* Adds an item to a scrollable list.
     * @param item
     */
    isItemVisible(item: Container): boolean;
    /** Returns all inner items in a list. */
    get items(): Container[] | [];
    private addBackground;
    private addMask;
    private makeScrollable;
    private disableChildrenInteractivity;
    private restoreChildrenInteractivity;
    private setInteractive;
    private get layoutHeight();
    private get layoutWidth();
    /** Controls item positions and visibility. */
    resize(): void;
    private onMouseHover;
    private onMouseOut;
    private onMouseScroll;
    /** Makes it scroll down to the last element. */
    scrollBottom(): void;
    /** Makes it scroll up to the first element. */
    scrollTop(): void;
    private renderAllItems;
    private stopRenderHiddenItems;
    /**
     * Scrolls to the element with the given ID.
     * @param elementID
     */
    scrollTo(elementID: number): void;
    /** Gets component height. */
    get height(): number;
    /** Gets component width. */
    get width(): number;
    private update;
}
//# sourceMappingURL=ScrollBox.d.ts.map