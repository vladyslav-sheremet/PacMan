{"version":3,"file":"FancyButton.js","sources":["../src/FancyButton.ts"],"sourcesContent":["import { ObservablePoint, Ticker } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { Text } from '@pixi/text';\nimport { Sprite } from '@pixi/sprite';\nimport { getView } from './utils/helpers/view';\nimport { getTextView } from './utils/helpers/text';\nimport { Button } from './Button';\nimport { Signal } from 'typed-signals';\nimport { FederatedPointerEvent } from '@pixi/events';\nimport { fitToView } from './utils/helpers/fit';\nimport { Tween, Group } from 'tweedle.js';\n\nconst states = ['default', 'hover', 'pressed', 'disabled'] as const;\n\ntype State = typeof states[number];\ntype Pos = { x?: number; y?: number };\ntype PosList = { [K in State]?: Pos };\n\nexport type Offset = Pos & PosList;\n\ntype Views = {\n    defaultView: string | Container;\n    hoverView?: string | Container;\n    pressedView?: string | Container;\n    disabledView?: string | Container;\n    text?: string | number | Text;\n    icon?: string | Container;\n};\ntype AnimationData = {\n    x?: number;\n    y?: number;\n    width?: number;\n    height?: number;\n    scale?: Pos;\n};\ntype Animation = {\n    props: AnimationData;\n    duration?: number;\n};\ntype StateAnimations = {\n    [K in State]?: Animation;\n};\n\nexport type ButtonOptions = Views & {\n    padding?: number;\n    anchor?: number;\n    anchorX?: number;\n    anchorY?: number;\n    offset?: Offset;\n    textOffset?: Offset;\n    iconOffset?: Offset;\n    animations?: StateAnimations;\n};\n\n/**\n * Button component with a lots of tweaks, to create a button fast.\n *\n *  By default text view and icon view are centered in the active view.\n *\n * If views are not the same size, offset property of the constructor\n * can be used to adjust the position of the text, icon and the views.\n * @example\n * ```\n * const button = new Button({\n *     defaultView: `button.png`,\n *     hoverView: `button_hover.png`,\n *     pressedView: `button_pressed.png`,\n *     text: new Text('Click me!'),\n * });\n *\n * button.onPress.connect(() => console.log('Button pressed!'));\n * ```\n */\nexport class FancyButton extends Container\n{\n    private events: Button;\n    private animations: StateAnimations;\n    private originalInnerViewState: AnimationData;\n\n    /** Padding of the button text view. If button text does not fit active view + padding it will scale down to fit. */\n    public padding: number;\n\n    /** Offset of the button state views. If state views have different sizes, this option can help adjust them. */\n    public offset: Offset & Pos;\n\n    /** Offset of the text view. Can be set to any state of the button. */\n    public textOffset: Offset;\n\n    /** Offset of the icon view. Can be set to any state of the button. */\n    public iconOffset: Offset;\n\n    //* View that holds all button inner views */\n    public innerView: Container;\n\n    /** View that is shown when non of the button events are active. */\n    public defaultView: Container;\n\n    /** View that is shown when the mouse hovers over the button. */\n    public hoverView!: Container;\n\n    /** View, shown when the mouse press on the component. */\n    public pressedView!: Container;\n\n    /** View shown when the button is disabled. */\n    public disabledView!: Container;\n\n    /** View for the button text. */\n    public textView!: Text;\n\n    /** View for the button icon. */\n    public iconView!: Container;\n\n    /** State of the button. Possible valuers are: 'default', 'hover', 'pressed', 'disabled' */\n    public state: State;\n\n    /** Anchor point of the button. */\n    public anchor: ObservablePoint;\n\n    /** Event fired when the button was pressed. */\n    public onPress: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n\n    /** Event fired when the button is down. */\n    public onDown: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n\n    /** Event fired when the down event happens inside the button and up event happened inside or outside of the button */\n    public onUp: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n\n    /** Event fired when a mouse hovers the button. */\n    public onHover: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n\n    /** Event fired when a mouse leaves the button. */\n    public onOut: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n\n    /** Event fired when the up event happens outside of the button, after the down event happened inside the button. */\n    public onUpOut: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n\n    constructor({\n        defaultView,\n        hoverView,\n        pressedView,\n        disabledView,\n        text,\n        padding,\n        offset,\n        textOffset,\n        iconOffset,\n        anchor,\n        anchorX,\n        anchorY,\n        icon,\n        animations\n    }: ButtonOptions)\n    {\n        super();\n\n        this.createViews({\n            defaultView,\n            hoverView,\n            pressedView,\n            disabledView,\n            text,\n            icon\n        });\n\n        this.anchor = new ObservablePoint(this.resetViewsPositions, this);\n        this.anchor.set(anchorX ?? anchor ?? 0, anchorY ?? anchor ?? 0);\n\n        this.padding = padding ?? 0;\n        this.offset = offset;\n        this.textOffset = textOffset;\n        this.iconOffset = iconOffset;\n        if (animations)\n        {\n            this.animations = animations;\n            Ticker.shared.add(() => Group.shared.update());\n        }\n\n        this.setState('default');\n\n        this.addEvents();\n    }\n\n    /**\n     * Updates the text of the button and updates its scaling basing on the new size.\n     * @param {string | number} text\n     */\n    set text(text: string | number)\n    {\n        if (!this.textView)\n        {\n            this.createTextView(typeof text === 'number' ? text.toString() : text);\n        }\n\n        this.textView.text = text;\n        this.setState(this.state);\n        this.adjustTextView(this.state);\n    }\n\n    /** Returns the text string of the button text element. */\n    get text(): string\n    {\n        return this.textView?.text;\n    }\n\n    /**\n     * Setter, that prevents all button events from firing.\n     * @param {boolean} enabled\n     */\n    set enabled(enabled: boolean)\n    {\n        this.events.enabled = enabled;\n\n        this.setState(enabled ? 'default' : 'disabled');\n    }\n\n    /** Getter that returns button state, that controls if button events are firing. */\n    get enabled(): boolean\n    {\n        return this.events.enabled;\n    }\n\n    /**\n     * Updates button state and shows the according views.\n     *\n     * Updates positions and offsets of the views.\n     *\n     * Plays animations if they are set.\n     * @param {State} newState\n     */\n    setState(newState: State)\n    {\n        if (this.state === newState)\n        {\n            return;\n        }\n\n        const currentView = this.getStateView(this.state);\n        const activeView = this.getStateView(newState);\n\n        currentView.visible = false;\n        activeView.visible = true;\n\n        this.state = newState;\n\n        this.setOffset(activeView, newState, this.offset);\n        this.adjustTextView(newState);\n        this.adjustIconView(newState);\n\n        this.playAnimations(newState);\n    }\n\n    /**\n     *\n     * Manage button text view.\n     * @param {string | Text} text - can be a string or a Text (Container-based element).\n     */\n    private createTextView(text: string | number | Text)\n    {\n        this.textView = getTextView(text);\n        this.textView.anchor.set(0);\n    }\n\n    /**\n     * Manage button icon view.\n     * @param {string | Text} icon - can be a string or a Text (Container-based element).\n     */\n    private createIconView(icon: string | Container)\n    {\n        this.iconView = getView(icon);\n    }\n\n    /**\n     * Manages views offsets if it's set.\n     * @param view\n     * @param state\n     * @param offset\n     */\n    private setOffset(view: Container, state: State, offset: Offset)\n    {\n        const stateOffset = offset\n            ? offset[state]\n            : {\n                x: 0,\n                y: 0\n            };\n        const defaultStateOffset = offset?.default;\n\n        if (stateOffset)\n        {\n            view.x += stateOffset.x ?? 0;\n            view.y += stateOffset.y ?? 0;\n        }\n        else if (defaultStateOffset)\n        {\n            view.x += defaultStateOffset.x ?? 0;\n            view.y += defaultStateOffset.y ?? 0;\n        }\n        else if (offset.x || offset.y)\n        {\n            view.x += offset.x ?? 0;\n            view.y += offset.y ?? 0;\n        }\n    }\n\n    /**\n     * Returns active view for the state.\n     * @param state\n     */\n    private getStateView(state: State): Container\n    {\n        switch (state)\n        {\n            case 'hover':\n                return this.hoverView ?? this.defaultView;\n            case 'pressed':\n                return this.pressedView ?? this.defaultView;\n            case 'disabled':\n                return this.disabledView ?? this.defaultView;\n            case 'default':\n            default:\n                return this.defaultView;\n        }\n    }\n\n    /**\n     * Adjusts text view position and scale.\n     * @param {State} state\n     */\n    private adjustTextView(state: State)\n    {\n        if (!this.textView)\n        {\n            return;\n        }\n\n        const activeView = this.getStateView(this.state);\n\n        fitToView(activeView, this.textView, this.padding);\n\n        activeView.addChild(this.textView);\n\n        this.textView.x = (activeView.width - this.textView.width) / 2;\n        this.textView.y = (activeView.height - this.textView.height) / 2;\n\n        this.setOffset(this.textView, state, this.textOffset);\n    }\n\n    /**\n     * Adjusts icon view position and scale.\n     * @param {State} state\n     */\n    private adjustIconView(state: State)\n    {\n        if (!this.iconView)\n        {\n            return;\n        }\n\n        const activeView = this.getStateView(this.state);\n\n        fitToView(activeView, this.iconView, this.padding);\n\n        activeView.addChild(this.iconView);\n\n        this.iconView.x = (activeView.width / 2) - (this.iconView.width / 2);\n        this.iconView.y = (activeView.height / 2) - (this.iconView.height / 2);\n\n        this.setOffset(this.iconView, state, this.iconOffset);\n    }\n\n    /**\n     * Reset views positions according to the button anchor setting.\n     * We have to set the anchor position for each view individually, as each of them\n     * can be a different type of view (container without anchor, sprite with anchor, etc)\n     * we have to reset all anchors to 0,0 and then set the positions manually.\n     */\n    private resetViewsPositions()\n    {\n        const anchorX = this.anchor?.x ?? 0;\n        const anchorY = this.anchor?.y ?? 0;\n        const views = [this.defaultView, this.hoverView, this.pressedView, this.disabledView];\n\n        views.forEach((view) =>\n        {\n            if (!view) return;\n\n            (view as Sprite).anchor?.set(0);\n\n            view.x = -view.width * anchorX;\n            view.y = -view.height * anchorY;\n        });\n    }\n\n    /**\n     * Button views manager. Adds or creates all button views according to the config.\n     * @param {Views} views\n     */\n    private createViews(views: Views)\n    {\n        const { defaultView, hoverView, pressedView, disabledView, text, icon } = views;\n\n        this.innerView = new Container();\n        this.addChild(this.innerView);\n\n        this.defaultView = getView(defaultView);\n        this.innerView.addChild(this.defaultView);\n\n        if (hoverView)\n        {\n            this.hoverView = getView(hoverView);\n            this.innerView.addChild(this.hoverView);\n            this.hoverView.visible = false;\n        }\n\n        if (pressedView)\n        {\n            this.pressedView = getView(pressedView);\n            this.innerView.addChild(this.pressedView);\n            this.pressedView.visible = false;\n        }\n\n        if (disabledView)\n        {\n            this.disabledView = getView(disabledView);\n            this.innerView.addChild(this.disabledView);\n            this.disabledView.visible = false;\n        }\n\n        if (text)\n        {\n            this.createTextView(text);\n        }\n\n        if (icon)\n        {\n            this.createIconView(icon);\n        }\n    }\n\n    /** Creates all button events */\n    private addEvents()\n    {\n        this.events = new Button(this);\n\n        this.onPress = new Signal();\n        this.onDown = new Signal();\n        this.onUp = new Signal();\n        this.onHover = new Signal();\n        this.onOut = new Signal();\n        this.onUpOut = new Signal();\n\n        this.events.onPress.connect((_bth, e?: FederatedPointerEvent) =>\n        {\n            this.onPress.emit(this, e);\n            this.setState('hover');\n        });\n\n        this.events.onDown.connect((_bth, e?: FederatedPointerEvent) =>\n        {\n            this.onDown.emit(this, e);\n            this.setState('pressed');\n        });\n\n        this.events.onUp.connect((_bth, e?: FederatedPointerEvent) =>\n        {\n            this.onUp.emit(this, e);\n            this.setState('hover');\n        });\n\n        this.events.onHover.connect((_bth, e?: FederatedPointerEvent) =>\n        {\n            this.onHover.emit(this, e);\n            this.setState('hover');\n        });\n\n        this.events.onOut.connect((_bth, e?: FederatedPointerEvent) =>\n        {\n            this.onOut.emit(this, e);\n            this.setState('default');\n        });\n\n        this.events.onUpOut.connect((_bth, e?: FederatedPointerEvent) =>\n        {\n            this.onUpOut.emit(this, e);\n            this.setState('default');\n        });\n    }\n\n    /**\n     * Starts animation for the current button state if configured.\n     * @param {State} state\n     */\n    private playAnimations(state: State)\n    {\n        if (!this.originalInnerViewState)\n        {\n            this.originalInnerViewState = {\n                x: this.innerView.x,\n                y: this.innerView.y,\n                width: this.innerView.width,\n                height: this.innerView.height,\n                scale: {\n                    x: this.innerView.scale.x,\n                    y: this.innerView.scale.y\n                }\n            };\n        }\n\n        if (this.animations && this.animations[state])\n        {\n            const data = this.animations[state];\n\n            new Tween(this.innerView).to(data.props, data.duration).start();\n        }\n        else if (this.animations && state === 'default')\n        {\n            new Tween(this.innerView).to(this.originalInnerViewState, 100).start();\n        }\n    }\n}\n"],"names":["Container","ObservablePoint","Ticker","Group","text","getTextView","getView","fitToView","Button","Signal","Tween"],"mappings":"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"}