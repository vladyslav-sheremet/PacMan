'use strict';

var display = require('@pixi/display');
var graphics = require('@pixi/graphics');
var sprite = require('@pixi/sprite');
var typedSignals = require('typed-signals');
var CheckBox = require('./CheckBox.js');
var Layout = require('./Layout.js');

class RadioGroup extends display.Container {
  constructor(options) {
    super();
    this.items = [];
    this.options = options;
    this.value = options.items[options.selectedItem];
    this.selected = options.selectedItem;
    this.innerView = new Layout.Layout({
      type: options.type,
      elementsMargin: options.elementsMargin
    });
    options.items.forEach((item, id) => {
      const unchecked = this.getView(options.style.bg);
      const checked = this.getView(options.style.checked);
      const checkBox = new CheckBox.CheckBox({
        text: item,
        checked: options.selectedItem === id,
        style: {
          unchecked,
          checked,
          text: options.style.textStyle
        }
      });
      this.innerView.addChild(checkBox);
      checkBox.onChange.connect(() => this.selectItem(id));
      this.items.push(checkBox);
      this.innerView.addChild(checkBox);
    });
    this.onChange = new typedSignals.Signal();
  }
  getView(view) {
    if (typeof view === "string") {
      return sprite.Sprite.from(view);
    }
    return this.getGraphics(view);
  }
  getGraphics({ color, fillColor, width, height, radius, padding }) {
    const graphics$1 = new graphics.Graphics().beginFill(color);
    const isCircle = width === height && radius >= width / 2;
    if (isCircle) {
      graphics$1.drawCircle(width / 2, width / 2, width / 2);
    } else {
      graphics$1.drawRoundedRect(0, 0, width, height, radius);
    }
    if (fillColor !== void 0) {
      graphics$1.beginFill(fillColor);
      const center = width / 2;
      if (isCircle) {
        graphics$1.drawCircle(center, center, center - padding);
      } else {
        graphics$1.drawRoundedRect(padding, padding, width - padding * 2, height - padding * 2, radius);
      }
    }
    return graphics$1;
  }
  /**
   * Select item by ID.
   * @param id
   */
  selectItem(id) {
    this.items.forEach((item, key) => {
      item.forceCheck(key === id);
    });
    this.value = this.options.items[id];
    if (this.selected !== id) {
      this.onChange.emit(id, this.value);
    }
    this.selected = id;
  }
}

exports.RadioGroup = RadioGroup;
//# sourceMappingURL=RadioGroup.js.map
