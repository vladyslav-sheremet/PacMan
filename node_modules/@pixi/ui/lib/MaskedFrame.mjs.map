{"version":3,"file":"MaskedFrame.mjs","sources":["../src/MaskedFrame.ts"],"sourcesContent":["import { Texture } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { Graphics } from '@pixi/graphics';\nimport { Sprite } from '@pixi/sprite';\nimport { getView } from './utils/helpers/view';\n\nexport type MaskedFrameOptions = {\n    target: string | Container;\n    mask: string | Graphics;\n    borderWidth?: number;\n    borderColor?: number;\n};\n\n/**\n * Draws a border or apply a mask of any shape to a container.\n * @example\n * ```\n * new MaskedFrame({\n *     target: `avatar.png`,\n *     mask: `avatar_mask.png`,\n *     borderWidth: 5,\n *     borderColor: 0xFFFFFF,\n * });\n * ```\n */\nexport class MaskedFrame extends Graphics\n{\n    /** Target container. */\n    public target: Container;\n\n    /** Mask to apply. */\n    public targetMask: Container;\n\n    /** Border color. */\n    public borderColor: number;\n\n    /** Border width. */\n    public borderWidth: number;\n\n    constructor({ target, mask, borderWidth, borderColor }: MaskedFrameOptions)\n    {\n        super();\n\n        this.borderColor = borderColor;\n        this.borderWidth = borderWidth;\n\n        this.target = getView(target);\n        this.targetMask = getView(mask);\n        this.target.addChild(this.targetMask);\n        this.target.mask = this.targetMask;\n\n        if (borderWidth)\n        {\n            this.showBorder();\n\n            this.target.x = borderWidth;\n            this.target.y = borderWidth;\n\n            const borderMask = typeof mask === 'string' ? new Sprite(Texture.from(mask)) : mask.clone();\n\n            borderMask.width += borderWidth * 2;\n            borderMask.height += borderWidth * 2;\n\n            this.mask = borderMask;\n            this.addChild(borderMask);\n        }\n\n        this.addChild(this.target);\n    }\n\n    /** Shows a border. */\n    public showBorder()\n    {\n        this.beginFill(this.borderColor);\n\n        const width = this.borderWidth * 2;\n\n        this.drawRect(0, 0, this.target.width + width, this.target.height + width);\n    }\n\n    /** Hides a border. */\n    public hideBorder()\n    {\n        this.clear();\n    }\n}\n"],"names":[],"mappings":";;;;;AAyBO,MAAM,oBAAoB,QACjC,CAAA;AAAA,EAaI,YAAY,EAAE,MAAA,EAAQ,IAAM,EAAA,WAAA,EAAa,aACzC,EAAA;AACI,IAAM,KAAA,EAAA,CAAA;AAEN,IAAA,IAAA,CAAK,WAAc,GAAA,WAAA,CAAA;AACnB,IAAA,IAAA,CAAK,WAAc,GAAA,WAAA,CAAA;AAEnB,IAAK,IAAA,CAAA,MAAA,GAAS,QAAQ,MAAM,CAAA,CAAA;AAC5B,IAAK,IAAA,CAAA,UAAA,GAAa,QAAQ,IAAI,CAAA,CAAA;AAC9B,IAAK,IAAA,CAAA,MAAA,CAAO,QAAS,CAAA,IAAA,CAAK,UAAU,CAAA,CAAA;AACpC,IAAK,IAAA,CAAA,MAAA,CAAO,OAAO,IAAK,CAAA,UAAA,CAAA;AAExB,IAAA,IAAI,WACJ,EAAA;AACI,MAAA,IAAA,CAAK,UAAW,EAAA,CAAA;AAEhB,MAAA,IAAA,CAAK,OAAO,CAAI,GAAA,WAAA,CAAA;AAChB,MAAA,IAAA,CAAK,OAAO,CAAI,GAAA,WAAA,CAAA;AAEhB,MAAA,MAAM,UAAa,GAAA,OAAO,IAAS,KAAA,QAAA,GAAW,IAAI,MAAA,CAAO,OAAQ,CAAA,IAAA,CAAK,IAAI,CAAC,CAAI,GAAA,IAAA,CAAK,KAAM,EAAA,CAAA;AAE1F,MAAA,UAAA,CAAW,SAAS,WAAc,GAAA,CAAA,CAAA;AAClC,MAAA,UAAA,CAAW,UAAU,WAAc,GAAA,CAAA,CAAA;AAEnC,MAAA,IAAA,CAAK,IAAO,GAAA,UAAA,CAAA;AACZ,MAAA,IAAA,CAAK,SAAS,UAAU,CAAA,CAAA;AAAA,KAC5B;AAEA,IAAK,IAAA,CAAA,QAAA,CAAS,KAAK,MAAM,CAAA,CAAA;AAAA,GAC7B;AAAA;AAAA,EAGO,UACP,GAAA;AACI,IAAK,IAAA,CAAA,SAAA,CAAU,KAAK,WAAW,CAAA,CAAA;AAE/B,IAAM,MAAA,KAAA,GAAQ,KAAK,WAAc,GAAA,CAAA,CAAA;AAEjC,IAAK,IAAA,CAAA,QAAA,CAAS,CAAG,EAAA,CAAA,EAAG,IAAK,CAAA,MAAA,CAAO,QAAQ,KAAO,EAAA,IAAA,CAAK,MAAO,CAAA,MAAA,GAAS,KAAK,CAAA,CAAA;AAAA,GAC7E;AAAA;AAAA,EAGO,UACP,GAAA;AACI,IAAA,IAAA,CAAK,KAAM,EAAA,CAAA;AAAA,GACf;AACJ;;;;"}