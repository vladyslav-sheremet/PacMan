import { Container } from '@pixi/display';
import { Graphics } from '@pixi/graphics';
import { getView } from './utils/helpers/view.mjs';

class ProgressBar extends Container {
  constructor({ bg, fill, fillOffset, progress }) {
    super();
    /** Start point of progress. */
    this.progressStart = 0;
    /** Current progress value. */
    this._progress = 0;
    this.innerView = new Container();
    this.addChild(this.innerView);
    this.bg = new Container();
    this.bg.addChild(getView(bg));
    this.innerView.addChild(this.bg);
    if (fill) {
      this.fill = new Container();
      this.fill.addChild(getView(fill));
      const offsetX = fillOffset?.x ?? 0;
      const offsetY = fillOffset?.y ?? 0;
      this.fill.x = (this.bg.width - this.fill.width) / 2 + offsetX;
      this.fill.y = (this.bg.height - this.fill.height) / 2 + offsetY;
      this.fillMask = new Graphics();
      this.fill.addChild(this.fillMask);
      this.fill.mask = this.fillMask;
      this.addChild(this.fill);
    }
    this.progress = progress;
  }
  validate(progress) {
    progress = Math.round(progress);
    if (progress < 0) {
      return 0;
    }
    if (progress > 100) {
      return 100;
    }
    return progress;
  }
  /** Sets current progress value. */
  set progress(progress) {
    this._progress = this.validate(progress);
    const startPoint = this.bg.width / 100 * this.progressStart;
    const endPoint = this.bg.width / 100 * this._progress - startPoint;
    if (this.fillMask) {
      this.fillMask.clear().lineStyle(0).beginFill(16777215).drawRect(startPoint, 0, endPoint, this.fill.height);
    }
  }
  /** Returns current progress value. */
  get progress() {
    return this._progress;
  }
}

export { ProgressBar };
//# sourceMappingURL=ProgressBar.mjs.map
