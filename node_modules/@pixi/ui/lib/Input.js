'use strict';

var core = require('@pixi/core');
var display = require('@pixi/display');
var graphics = require('@pixi/graphics');
var sprite = require('@pixi/sprite');
var text = require('@pixi/text');
var typedSignals = require('typed-signals');
var view = require('./utils/helpers/view.js');

class Input extends display.Container {
  constructor(options) {
    super();
    this.editing = false;
    this.tick = 0;
    this.activation = false;
    this.options = options;
    this.bg = view.getView(options.bg);
    this.bg.cursor = "text";
    this.bg.interactive = true;
    const defaultTextStyle = {
      fill: 0,
      align: "center"
    };
    const textStyle = new text.TextStyle(options.textStyle ?? defaultTextStyle);
    this.inputField = new text.Text("", textStyle);
    this.inputMask = new graphics.Graphics().beginFill(16777215).drawRect(this.padding, this.padding, this.bg.width - this.padding * 2, this.bg.height - this.padding * 2);
    this.inputField.mask = this.inputMask;
    this._cursor = new sprite.Sprite(core.Texture.WHITE);
    this._cursor.tint = Number(options.textStyle.fill) || 0;
    this._cursor.anchor.set(0.5);
    this._cursor.width = 2;
    this._cursor.height = this.inputField.height * 0.8;
    this._cursor.alpha = 0;
    this._cursor.mask = this.inputMask;
    this.placeholder = new text.Text(options.placeholder, textStyle ?? defaultTextStyle);
    this.placeholder.visible = !!options.placeholder;
    this.value = options.value ?? "";
    this.addChild(this.bg, this.inputField, this.placeholder, this._cursor, this.inputMask);
    this.align();
    this.cursor = "text";
    this.interactive = true;
    this.on("pointertap", () => this.activation = true);
    if (core.utils.isMobile.any) {
      window.addEventListener("touchstart", () => this.handleActivation());
      let keyboard = document.getElementById("v-keyboard");
      if (!keyboard) {
        keyboard = document.createElement("input");
        document.body.appendChild(keyboard);
        keyboard.setAttribute("id", "v-keyboard");
        keyboard.style.opacity = "0";
      }
      keyboard.oninput = () => {
        let value = keyboard.value;
        const maxLength = this.options.maxLength;
        if (maxLength && value.length > this.options.maxLength) {
          value = value.substring(0, maxLength);
          keyboard.value = value;
        }
        this.value = value;
        this.onChange.emit(this.value);
      };
    } else {
      window.addEventListener("click", () => {
        this.handleActivation();
        this.onEnter.emit(this.value);
      });
      window.addEventListener("keydown", (e) => {
        const key = e.key;
        if (key === "Backspace") {
          this._delete();
        } else if (key === "Escape" || key === "Enter") {
          this.stopEditing();
          this.onEnter.emit(this.value);
        } else if (key.length === 1)
          this._add(key);
      });
    }
    this.onEnter = new typedSignals.Signal();
    this.onChange = new typedSignals.Signal();
    core.Ticker.shared.add((delta) => this.update(delta));
  }
  _add(key) {
    if (!this.editing) {
      return;
    }
    if (this.options.maxLength && this.value.length >= this.options.maxLength) {
      return;
    }
    this.value = this.value + key;
    this.onChange.emit(this.value);
  }
  _delete() {
    if (!this.editing || this.value.length === 0)
      return;
    const array = this.value.split("");
    array.pop();
    this.value = array.join("");
    this.onChange.emit(this.value);
  }
  _startEditing() {
    this.tick = 0;
    this.editing = true;
    this.placeholder.visible = false;
    this._cursor.alpha = 1;
    if (core.utils.isMobile.any) {
      const keyboard = document.getElementById("v-keyboard");
      keyboard.focus();
      keyboard.click();
      keyboard.value = this.value;
    }
    this.align();
  }
  handleActivation() {
    this.stopEditing();
    if (this.activation) {
      this._startEditing();
      this.activation = false;
    }
  }
  stopEditing() {
    this._cursor.alpha = 0;
    this.editing = false;
    if (this.inputField.text === "") {
      this.placeholder.visible = true;
    }
    if (this.value.length === 0)
      this.placeholder.visible = true;
    if (core.utils.isMobile.any)
      document.getElementById("v-keyboard")?.blur();
    this.align();
  }
  update(dt) {
    if (!this.editing)
      return;
    this.tick += dt * 0.1;
    this._cursor.alpha = Math.round(Math.sin(this.tick) * 0.5 + 0.5);
  }
  align() {
    const align = this.getAlign();
    this.inputField.anchor.set(align, 0.5);
    this.inputField.x = this.bg.width * align + (align === 1 ? -this.padding : this.padding);
    this.inputField.y = this.bg.height / 2;
    this.placeholder.anchor.set(align, 0.5);
    this.placeholder.x = this.bg.width * align + (align === 1 ? -this.padding : this.padding);
    this.placeholder.y = this.bg.height / 2;
    this._cursor.x = this.getCursorPosX();
    this._cursor.y = this.inputField.y;
  }
  get padding() {
    return this.options.padding | 0;
  }
  getAlign() {
    const maxWidth = this.bg.width * 0.95;
    const isOverflowed = this.inputField.width + this.padding * 3 > maxWidth;
    if (isOverflowed) {
      return this.editing ? 1 : 0;
    }
    switch (this.options.align) {
      case "left":
        return 0;
      case "center":
        return 0.5;
      case "right":
        return 1;
      default:
        return 0;
    }
  }
  getCursorPosX() {
    const align = this.getAlign();
    switch (align) {
      case 0:
        return this.inputField.x + this.inputField.width;
      case 0.5:
        return this.inputField.x + this.inputField.width * 0.5;
      case 1:
        return this.inputField.x;
      default:
        return 0;
    }
  }
  /** Sets the input text. */
  set value(text) {
    this.inputField.text = text;
    if (text.length !== 0) {
      this.placeholder.visible = false;
    } else {
      this.placeholder.visible = !this.editing;
    }
    this.align();
  }
  /** Return text of the input. */
  get value() {
    return this.inputField.text;
  }
}

exports.Input = Input;
//# sourceMappingURL=Input.js.map
