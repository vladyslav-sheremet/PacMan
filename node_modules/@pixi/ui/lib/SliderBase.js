'use strict';

var display = require('@pixi/display');
var sprite = require('@pixi/sprite');
var text = require('@pixi/text');
var hitbox = require('./utils/helpers/hitbox.js');
var view = require('./utils/helpers/view.js');
var ProgressBar = require('./ProgressBar.js');

class SliderBase extends ProgressBar.ProgressBar {
  constructor(options) {
    super({
      bg: options.bg,
      fill: options.fill ?? options.bg,
      fillOffset: options.fillOffset
    });
    this.dragging = 0;
    /** Minimal value. */
    this.min = 0;
    /** Maximal value. */
    this.max = 100;
    if (options.slider1) {
      this.slider1 = this.createSlider(options.slider1);
      if (options.showValue) {
        this.value1Text = new text.Text("", options.valueTextStyle || { fill: 16777215 });
        this.value1Text.anchor.set(0.5);
        this.addChild(this.value1Text);
      }
    }
    if (options.slider2) {
      this.slider2 = this.createSlider(options.slider2);
      if (options.showValue) {
        this.value2Text = new text.Text("", options.valueTextStyle || { fill: 16777215 });
        this.value2Text.anchor.set(0.5);
        this.addChild(this.value2Text);
      }
    }
    this.min = options.min ?? 0;
    this.max = options.max ?? 100;
    this.activate();
  }
  activate() {
    this.bg.interactive = true;
    this.bg.on("pointerdown", this.startUpdate, this).on("globalpointermove", this.update, this).on("pointerup", this.endUpdate, this).on("pointerupoutside", this.endUpdate, this);
    if (this.slider1) {
      this.slider1.interactive = true;
      this.slider1.on("pointerdown", this.startUpdate, this).on("globalpointermove", this.update, this).on("pointerup", this.endUpdate, this).on("pointerupoutside", this.endUpdate, this);
    }
    if (this.slider2) {
      this.slider2.interactive = true;
      this.slider2.on("pointerdown", this.startUpdate, this).on("globalpointermove", this.update, this).on("pointerup", this.endUpdate, this).on("pointerupoutside", this.endUpdate, this);
    }
    hitbox.removeHitBox(this.fill, this.value1Text, this.value2Text);
  }
  createSlider(sliderData) {
    const slider = view.getView(sliderData);
    slider.x = slider.width / 2;
    const container = new display.Container();
    container.addChild(slider);
    if (slider instanceof sprite.Sprite) {
      slider.anchor.set(0.5);
    }
    container.y = this.bg.height / 2;
    this.addChild(container);
    return container;
  }
  startUpdate(event) {
    this.dragging = 1;
    this.update(event);
  }
  endUpdate() {
    if (!this.dragging)
      return;
    this.dragging = 0;
  }
  update(_event) {
  }
}

exports.SliderBase = SliderBase;
//# sourceMappingURL=SliderBase.js.map
