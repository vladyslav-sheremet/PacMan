{"version":3,"file":"RadioGroup.mjs","sources":["../src/RadioGroup.ts"],"sourcesContent":["import { Container } from '@pixi/display';\nimport { Graphics } from '@pixi/graphics';\nimport { Sprite } from '@pixi/sprite';\nimport { ITextStyle, TextStyle } from '@pixi/text';\nimport { Signal } from 'typed-signals';\nimport { CheckBox } from './CheckBox';\nimport { Layout, LayoutType } from './Layout';\n\nexport type GraphicsType = {\n    color: number;\n    fillColor?: number;\n    width?: number;\n    height?: number;\n    radius?: number;\n    padding?: number;\n};\n\nexport type RadioBoxStyle = {\n    bg: string | GraphicsType;\n    checked: string | GraphicsType;\n    textStyle?: TextStyle | Partial<ITextStyle>;\n};\n\nexport type RadioBoxOptions = {\n    items: string[];\n    type: LayoutType;\n    elementsMargin: number;\n    style: RadioBoxStyle;\n    selectedItem?: number;\n};\n\n/**\n * Creates a container-based group of checkbox elements, that can be used as radio buttons.\n *\n * Only one checkbox can be selected at a time.\n * @example\n * ```\n * new RadioGroup({\n *     selectedItem: 0,\n *     items: ['Option 1', 'Option 2', 'Option 3'],\n *     style: {\n *         bg: 'radio.png',\n *         checked: 'radio_checked.png'\n *     },\n * });\n *\n * ```\n */\nexport class RadioGroup extends Container\n{\n    private readonly options: RadioBoxOptions;\n    private items: CheckBox[] = [];\n\n    /** {@link Layout}, that holds and control all inned checkboxes.S  */\n    public innerView: Layout;\n\n    /** Text value of the selected item. */\n    public value: string;\n\n    /** ID of the selected item. */\n    public selected: number;\n\n    /** Fires, when new item is selected. */\n    public onChange: Signal<(selectedItemID: number, selectedVal: string) => void>;\n\n    constructor(options: RadioBoxOptions)\n    {\n        super();\n\n        this.options = options;\n        this.value = options.items[options.selectedItem];\n\n        this.selected = options.selectedItem;\n\n        this.innerView = new Layout({\n            type: options.type,\n            elementsMargin: options.elementsMargin\n        });\n\n        options.items.forEach((item, id) =>\n        {\n            const unchecked = this.getView(options.style.bg);\n            const checked = this.getView(options.style.checked);\n\n            const checkBox = new CheckBox({\n                text: item,\n                checked: options.selectedItem === id,\n                style: {\n                    unchecked,\n                    checked,\n                    text: options.style.textStyle\n                }\n            });\n\n            this.innerView.addChild(checkBox);\n\n            checkBox.onChange.connect(() => this.selectItem(id));\n\n            this.items.push(checkBox);\n\n            this.innerView.addChild(checkBox);\n        });\n\n        this.onChange = new Signal();\n    }\n\n    private getView(view: string | GraphicsType): Container\n    {\n        if (typeof view === 'string')\n        {\n            return Sprite.from(view);\n        }\n\n        return this.getGraphics(view as GraphicsType);\n    }\n\n    private getGraphics({ color, fillColor, width, height, radius, padding }: GraphicsType)\n    {\n        const graphics = new Graphics().beginFill(color);\n\n        const isCircle = width === height && radius >= width / 2;\n\n        if (isCircle)\n        {\n            graphics.drawCircle(width / 2, width / 2, width / 2);\n        }\n        else\n        {\n            graphics.drawRoundedRect(0, 0, width, height, radius);\n        }\n\n        if (fillColor !== undefined)\n        {\n            graphics.beginFill(fillColor);\n\n            const center = width / 2;\n\n            if (isCircle)\n            {\n                graphics.drawCircle(center, center, center - padding);\n            }\n            else\n            {\n                graphics.drawRoundedRect(padding, padding, width - (padding * 2), height - (padding * 2), radius);\n            }\n        }\n\n        return graphics;\n    }\n\n    /**\n     * Select item by ID.\n     * @param id\n     */\n    public selectItem(id: number)\n    {\n        this.items.forEach((item, key) =>\n        {\n            item.forceCheck(key === id);\n        });\n\n        this.value = this.options.items[id];\n\n        if (this.selected !== id)\n        {\n            this.onChange.emit(id, this.value);\n        }\n\n        this.selected = id;\n    }\n}\n"],"names":[],"mappings":"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"}