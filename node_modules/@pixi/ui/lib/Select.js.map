{"version":3,"file":"Select.js","sources":["../src/Select.ts"],"sourcesContent":["import { Container } from '@pixi/display';\nimport { Graphics } from '@pixi/graphics';\nimport { Text, TextStyle } from '@pixi/text';\nimport { Signal } from 'typed-signals';\nimport { FancyButton } from './FancyButton';\nimport { ScrollBox, ScrollBoxOptions } from './ScrollBox';\nimport { getView } from './utils/helpers/view';\n\nconst defaultVisibleItems = 5;\n\ntype Offset = {\n    y: number;\n    x: number;\n};\n\nexport type SelectItemsOptions = {\n    items: string[];\n    backgroundColor: number;\n    hoverColor?: number;\n    width?: number;\n    height?: number;\n    textStyle?: Partial<TextStyle>;\n    radius?: number;\n};\n\nexport type SelectOptions = {\n    closedBG: string | Container;\n    openBG?: string | Container;\n    textStyle?: Partial<TextStyle>;\n    selected?: number;\n    selectedTextOffset?: { x?: number; y?: number };\n\n    items: SelectItemsOptions;\n\n    scrollBoxOffset?: { x?: number; y?: number };\n    scrollBoxWidth?: number;\n    scrollBoxHeight?: number;\n    scrollBoxRadius?: number;\n\n    visibleItems?: number;\n\n    scrollBox?: ScrollBoxOptions & {\n        offset?: Offset;\n    };\n};\n\n/**\n * Container-based component that gives us a selection dropdown.\n *\n * It is a composition of a {@link Button} and a {@link ScrollBox}.\n * @example\n * ```\n * new Select({\n *     closedBG: `select_closed.png`,\n *     openBG: `select_open.png`,\n *     textStyle: { fill: 0xffffff, fontSize: 20 },\n *     items: {\n *         items,\n *         backgroundColor: 0x000000,\n *         hoverColor: 0x000000,\n *         width: 200,\n *         height: 50,\n *     },\n *     scrollBox: {\n *         width: 200,\n *         height: 350,\n *         radius: 30,\n *     },\n * });\n *\n * ```\n */\n\n// TODO: rewrite this basing on Swich\nexport class Select extends Container\n{\n    private readonly openButton: FancyButton;\n    private readonly closeButton: FancyButton;\n    private readonly openView: Container;\n    private scrollBox: ScrollBox;\n\n    /** Selected value ID. */\n    public value: number;\n\n    /** Fires when selected value is changed. */\n    public onSelect: Signal<(value: number, text: string) => void>;\n\n    constructor({ closedBG, textStyle, items, openBG, selected, selectedTextOffset, scrollBox, visibleItems }: SelectOptions)\n    {\n        super();\n\n        this.openButton = new FancyButton({\n            defaultView: getView(closedBG),\n            text: new Text(items?.items ? items.items[0] : '', textStyle),\n            textOffset: selectedTextOffset\n        });\n        this.openButton.onPress.connect(() => this.toggle());\n        this.addChild(this.openButton);\n\n        this.openView = getView(openBG);\n        this.openView.visible = false;\n        this.addChild(this.openView);\n\n        const defaultView = new Graphics()\n            .beginFill(0x000000, 0.00001)\n            .drawRect(0, 0, this.openButton.width, this.openButton.height);\n\n        this.closeButton = new FancyButton({\n            defaultView,\n            text: new Text(items?.items ? items.items[0] : '', textStyle),\n            textOffset: selectedTextOffset\n        });\n        this.closeButton.onPress.connect(() => this.toggle());\n        this.openView.addChild(this.closeButton);\n\n        this.scrollBox = new ScrollBox({\n            type: 'vertical',\n            elementsMargin: 0,\n            width: this.openButton.width,\n            height: this.openButton.height * (visibleItems ?? defaultVisibleItems),\n            radius: 0,\n            padding: 0,\n            ...scrollBox\n        });\n        this.scrollBox.y = this.openButton.height;\n        this.openView.addChild(this.scrollBox);\n\n        if (scrollBox?.offset)\n        {\n            this.scrollBox.x += scrollBox.offset.x ?? 0;\n            this.scrollBox.y += scrollBox.offset.y ?? 0;\n        }\n\n        this.onSelect = new Signal();\n\n        this.convertItemsToButtons(items).forEach((button, id) =>\n        {\n            const text = button.text;\n\n            if (id === selected)\n            {\n                this.openButton.text = text;\n                this.closeButton.text = text;\n            }\n\n            button.onPress.connect(() =>\n            {\n                this.value = id;\n                this.onSelect.emit(id, text);\n                this.openButton.text = text;\n                this.closeButton.text = text;\n                this.close();\n            });\n\n            this.scrollBox.addItem(button);\n        });\n    }\n\n    /** Toggle the select state (open if closed, closes - id open). */\n    public toggle()\n    {\n        this.openView.visible = !this.openView.visible;\n        this.openButton.visible = !this.openButton.visible;\n    }\n\n    /** Show dropdown. */\n    public open()\n    {\n        this.openView.visible = true;\n        this.openButton.visible = false;\n    }\n\n    /** Hide dropdown. */\n    public close()\n    {\n        this.openView.visible = false;\n        this.openButton.visible = true;\n    }\n\n    private convertItemsToButtons({\n        items,\n        backgroundColor,\n        hoverColor,\n        width,\n        height,\n        textStyle,\n        radius\n    }: SelectItemsOptions): FancyButton[]\n    {\n        const buttons: FancyButton[] = [];\n\n        items.forEach((item) =>\n        {\n            const defaultView = new Graphics().beginFill(backgroundColor).drawRoundedRect(0, 0, width, height, radius);\n\n            const color = hoverColor ?? backgroundColor;\n            const hoverView = new Graphics().beginFill(color).drawRoundedRect(0, 0, width, height, radius);\n            const text = new Text(item, textStyle);\n            const button = new FancyButton({ defaultView, hoverView, text });\n\n            buttons.push(button);\n        });\n\n        return buttons;\n    }\n}\n"],"names":["Container","FancyButton","getView","Text","Graphics","ScrollBox","Signal","text"],"mappings":"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"}