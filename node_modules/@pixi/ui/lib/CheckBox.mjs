import { Text } from '@pixi/text';
import { Signal } from 'typed-signals';
import { Switcher } from './Switcher.mjs';
import { getView } from './utils/helpers/view.mjs';

class CheckBox extends Switcher {
  constructor(options) {
    const unchecked = getView(options.style.unchecked);
    const checked = getView(options.style.checked);
    super([unchecked, checked], ["onPress"], options.checked ? 1 : 0);
    this.label = new Text(options.text ?? "", options.style.text);
    this.label.visible = options.text.length > 0;
    this.label.x = unchecked.width + 10;
    this.label.y = (unchecked.height - this.label.height) / 2;
    this.addChild(this.label);
    this.onCheck = new Signal();
    this.onChange.connect(() => this.onCheck.emit(this.checked));
  }
  /** Getter, which returns a checkbox state. */
  get checked() {
    return this.active === 1;
  }
  /** Setter, which sets a checkbox state. */
  set checked(checked) {
    this.switch(checked ? 1 : 0, "onPress");
  }
  /**
   * Setter, that sets a checkbox state without emitting a signal.
   * @param checked
   */
  forceCheck(checked) {
    this.forceSwitch(checked ? 1 : 0);
  }
}

export { CheckBox };
//# sourceMappingURL=CheckBox.mjs.map
