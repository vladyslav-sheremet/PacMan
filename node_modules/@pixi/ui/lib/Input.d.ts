import { Container } from '@pixi/display';
import { TextStyle } from '@pixi/text';
import { Signal } from 'typed-signals';
export type InputOptions = {
    bg?: Container | string;
    textStyle?: Partial<TextStyle>;
    placeholder?: string;
    value?: string;
    maxLength?: number;
    align?: 'left' | 'center' | 'right';
    padding?: number;
};
/**
 * Container-based component that creates an input to read the user's text.
 * @example
 * ```
 * new Input({
 *     bg: Sprite.from('input.png'),
 *     placeholder: 'Enter text'
 * });
 * ```
 */
export declare class Input extends Container {
    private readonly bg;
    private readonly inputField;
    private readonly inputMask;
    private readonly placeholder;
    private _cursor;
    private editing;
    private tick;
    private activation;
    private readonly options;
    /** Fires when input loses focus. */
    readonly onEnter: Signal<(text: string) => void>;
    /** Fires every time input string is changed. */
    readonly onChange: Signal<(text: string) => void>;
    constructor(options: InputOptions);
    private _add;
    private _delete;
    private _startEditing;
    private handleActivation;
    private stopEditing;
    private update;
    private align;
    private get padding();
    private getAlign;
    private getCursorPosX;
    /** Sets the input text. */
    set value(text: string);
    /** Return text of the input. */
    get value(): string;
}
//# sourceMappingURL=Input.d.ts.map